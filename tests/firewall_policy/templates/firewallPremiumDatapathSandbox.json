{
	"properties": {
		"mode": "Incremental",
		"debugSetting": {
		       "detailLevel": "requestContent, responseContent"
		},	       
		"template": {
			"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"parameters": {
				"virtualNetworkName": {
					"type": "string",
					"defaultValue": "test-vnet",
					"metadata": {
						"description": "virtual network name"
					}
				},
				"adminUsername": {
					"type": "string",
					"defaultValue": "gsauser",
					"metadata": {
						"description": "Username for the Virtual Machine."
					}
				},
				"location": {
					"type": "string",
					"defaultValue": "[resourceGroup().location]",
					"metadata": {
						"description": "Location for all resources, the location must support Availability Zones if required."
					}
				},
				"vmSize": {
					"type": "string",
					"defaultValue": "Standard_DS1_v2",
					"metadata": {
						"description": "Size of the virtual machine."
					}
				},
				"numberOfFirewallPublicIPAddresses": {
					"type": "int",
					"defaultValue": 1,
					"minValue": 1,
					"maxValue": 100,
					"metadata": {
						"description": "Number of public IP addresses for the Azure Firewall"
					}
				},
				"authenticationType": {
					"type": "string",
					"defaultValue": "sshPublicKey",
					"allowedValues": [
						"sshPublicKey",
						"password"
					],
					"metadata": {
						"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
					}
				},
		    "sigOverrideParam1": {
      		"type": "string",
      		"defaultValue": "2024897",
      		"metadata": {
        		"description": "Intruder Detection - Signature Overrodes Id 1"
      		}
    		},
    		"sigOverrideParam2": {
      		"type": "string",
      		"defaultValue": "2024898",
      		"metadata": {
        		"description": "Intruder Detection - Signature Overrodes Id 2"
      		}
    		},
				"adminPasswordOrKey": {
					"type": "securestring",
					"defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCpaQl5ASt0FlPjPoMDabG1QJHM5EIoMOGq+FlpHcTEsGrP5Cu1MdLr6/l84qs4Q7TsZ1JO1pAqEAn5lo2ZRhSlt+Afa/J6OatqlTWl50wYh5DPptSCLdXkIcMIr2GqvrlZQWPppLDMzIRxf1ILjKAV1UYNCyS+Qk5sA2dMry/ZZ3pSGLpukH7+N9X0hLR665iCvoZ/vku5hUbYMVKtmqODowaHjRzksAooqM9d3iz3MSqGRcW21qjC23Ooc/tfFnHl+wngsCkWRO5KXwuM4GtS1tAzLkL1xB7bJprYij9u5JYZKt7fzvKWD/7KbTFGnXEOpqAsElaDTYNOqRqh1mp87QEVPdhgAvsgJDJk76XBg7A8dJqfb3YxPsK/7LWB7YHreprf+wr7q/tat0Vj46df0+X4ocxX2xjEh8JjDVlPQXpFKmqtAop1Ls5fV3bwCZJ2pvhF5zeC7hMvlK54cmJkIz4YwOTG8zi52o1E97yI6Wc0dGmnRF+O7LRARJKJIq0= generated-by-azure",
					"metadata": {
						"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
					}
				}
			},
			"variables": {
				"azureFirewallSubnetPrefix": "10.0.1.0/24",
				"azureFirewallSubnetName": "AzureFirewallSubnet",
				"azfwRouteTableName": "AzfwRouteTable",
				"azureFirewallSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('virtualNetworkName'), variables('azureFirewallSubnetName'))]",
				"azureFirewallSubnetJSON": "[json(format('{{\"id\": \"{0}\"}}', variables('azureFirewallSubnetId')))]",
				"clientSubnetPrefix": "10.0.2.0/24",
				"clientSubnetName": "ClientSubnet",
				"clientNicName": "ClientNic",
				"clientPrivateIp": "10.0.2.4",
				"clientSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('clientSubnetName'))]",
				"firewallName": "firewall1",
				"jumpBoxPublicIPAddressName": "JumpHostPublicIP",
				"jumpboxSubnetPrefix": "10.0.0.0/24",
				"jumpBoxSubnetName": "JumpboxSubnet",
				"jumpboxPrivateIp": "10.0.0.4",
				"jumpBoxNicName": "JumpHostNic",
				"jumpBoxSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('jumpBoxSubnetName'))]",
				"keyVaultCASecretName": "CaCert",
				"keyVaultName": "[format('fw-quick-{0}', uniqueString(subscription().id, resourceGroup().id))]",
				"nextHopIP": "10.0.1.4",
				"publicIPNamePrefix": "publicIP",
				"serverSubnetName": "ServerSubnet",
				"serverNicName": "ServerNic",
				"serverPrivateIp": "10.0.3.4",
				"serverSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('serverSubnetName'))]",
				"serverSubnetPrefix": "10.0.3.0/24",
				"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'sajumpbox')]",
				"vnetAddressPrefix": "10.0.0.0/16",
				"copy": [
					{
						"name": "azureFirewallIpConfigurations",
						"count": "[parameters('numberOfFirewallPublicIPAddresses')]",
						"input": {
							"name": "[concat('IpConf', copyIndex('azureFirewallIpConfigurations'))]",
							"properties": {
								"subnet": "[if(equals(copyIndex('azureFirewallIpConfigurations'), 0), variables('azureFirewallSubnetJSON'), json('null'))]",
								"publicIPAddress": {
									"id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPNamePrefix'), add(copyIndex('azureFirewallIpConfigurations'), 1)))]"
								}
							}
						}
					}
				],
				"linuxConfiguration": {
					"disablePasswordAuthentication": true,
					"ssh": {
						"publicKeys": [
							{
								"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
								"keyData": "[parameters('adminPasswordOrKey')]"
							}
						]
					}
				},
				"networkSecurityGroupName": "[concat(variables('clientSubnetName'), '-nsg')]"
			},
			"resources": [
				{
      		"type": "Microsoft.Resources/deploymentScripts",
      		"apiVersion": "2020-10-01",
      		"name": "CreateAndDeployCertificates",
      		"location": "[parameters('location')]",
      		"kind": "AzurePowerShell",
      		"properties": {
        		"forceUpdateTag": "2",
        		"azPowerShellVersion": "3.0",
        		"scriptContent": "# Write the config to file\n$opensslConfig=@'\n[ req ]\ndefault_bits        = 4096\ndistinguished_name  = req_distinguished_name\nstring_mask         = utf8only\ndefault_md          = sha512\n\n[ req_distinguished_name ]\ncountryName                     = Country Name (2 letter code)\nstateOrProvinceName             = State or Province Name\nlocalityName                    = Locality Name\n0.organizationName              = Organization Name\norganizationalUnitName          = Organizational Unit Name\ncommonName                      = Common Name\nemailAddress                    = Email Address\n\n[ rootCA_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ interCA_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:1\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[ server_ext ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:false\nkeyUsage = critical, digitalSignature\nextendedKeyUsage = serverAuth\n'@\n\nSet-Content -Path openssl.cnf -Value $opensslConfig\n\n# Create root CA\nopenssl req -x509 -new -nodes -newkey rsa:4096 -keyout rootCA.key -sha256 -days 3650 -out rootCA.crt -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Root CA' -config openssl.cnf -extensions rootCA_ext\n\n# Create intermediate CA request\nopenssl req -new -nodes -newkey rsa:4096 -keyout interCA.key -sha256 -out interCA.csr -subj '/C=US/ST=US/O=Self Signed/CN=Self Signed Intermediate CA'\n\n# Sign on the intermediate CA\nopenssl x509 -req -in interCA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out interCA.crt -days 3650 -sha256 -extfile openssl.cnf -extensions interCA_ext\n\n# Export the intermediate CA into PFX\nopenssl pkcs12 -export -out interCA.pfx -inkey interCA.key -in interCA.crt -password 'pass:'\n\n# Convert the PFX and public key into base64\n$interCa = [Convert]::ToBase64String((Get-Content -Path interCA.pfx -AsByteStream -Raw))\n$rootCa = [Convert]::ToBase64String((Get-Content -Path rootCA.crt -AsByteStream -Raw))\n\n# Assign outputs\n$DeploymentScriptOutputs = @{}\n$DeploymentScriptOutputs['interca'] = $interCa\n$DeploymentScriptOutputs['rootca'] = $rootCa\n",
       		  "timeout": "PT5M",
        	  "cleanupPreference": "OnSuccess",
       		  "retentionInterval": "P1D"
     	 	  }
    		},
    		{
      		"type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      		"apiVersion": "2018-11-30",
      		"name": "DemoIdentity",
      		"location": "[parameters('location')]"
    		},
    		{
      		"type": "Microsoft.KeyVault/vaults",
      		"apiVersion": "2019-09-01",
      		"name": "[variables('keyVaultName')]",
      		"location": "[parameters('location')]",
      		"properties": {
        		"enabledForDeployment": false,
        		"enabledForDiskEncryption": false,
        		"enabledForTemplateDeployment": false,
        		"tenantId": "[subscription().tenantId]",
        		"accessPolicies": [
          		{
            		"objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').principalId]",
            		"tenantId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'), '2018-11-30').tenantId]",
            		"permissions": {
              		"secrets": [
                		"get",
                		"list"
              		]
            		}
          		}
        		],
        		"sku": {
          		"name": "standard",
          		"family": "A"
       		  }
      		},
      		"dependsOn": [
        		"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]"
      		]
    		},
    		{
      		"type": "Microsoft.KeyVault/vaults/secrets",
      		"apiVersion": "2019-09-01",
      		"name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultCASecretName'))]",
      		"location": "[parameters('location')]",
      		"properties": {
        		"value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates'), '2020-10-01').outputs.interca]"
      		},
      		"dependsOn": [
        		"[resourceId('Microsoft.Resources/deploymentScripts', 'CreateAndDeployCertificates')]",
        		"[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
     		 ]
    		},
				{
					"type": "Microsoft.Storage/storageAccounts",
					"name": "[variables('storageAccountName')]",
					"apiVersion": "2019-06-01",
					"location": "[parameters('location')]",
					"sku": {
						"name": "Standard_LRS"
					},
					"kind": "Storage",
					"properties": {}
				},
				{
					"type": "Microsoft.Network/routeTables",
					"name": "[variables('azfwRouteTableName')]",
					"apiVersion": "2020-05-01",
					"location": "[parameters('location')]",
					"properties": {
						"disableBgpRoutePropagation": false,
						"routes": [
							{
								"name": "AzfwDefaultRoute",
								"properties": {
									"addressPrefix": "0.0.0.0/0",
									"nextHopType": "VirtualAppliance",
									"nextHopIpAddress": "[variables('nextHopIP')]"
								}
							},
							{
								"name": "ClientNetRoute",
								"properties": {
									"addressPrefix": "10.0.2.0/24",
									"nextHopType": "VirtualAppliance",
									"nextHopIpAddress": "[variables('nextHopIP')]"
								}
							},
							{
								"name": "ServerNetRoute",
								"properties": {
									"addressPrefix": "10.0.3.0/24",
									"nextHopType": "VirtualAppliance",
									"nextHopIpAddress": "[variables('nextHopIP')]"
								}
							}
						]
					}
				},
				{
					"comments": "Simple Network Security Group for subnet [variables('clientSubnetName')]",
					"type": "Microsoft.Network/networkSecurityGroups",
					"apiVersion": "2020-05-01",
					"name": "[variables('networkSecurityGroupName')]",
					"location": "[parameters('location')]",
					"properties": {}
				},
				{
					"name": "[parameters('virtualNetworkName')]",
					"apiVersion": "2020-05-01",
					"type": "Microsoft.Network/virtualNetworks",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Network/routeTables', variables('azfwRouteTableName'))]",
						"[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
					],
					"tags": {
						"displayName": "[parameters('virtualNetworkName')]"
					},
					"properties": {
						"addressSpace": {
							"addressPrefixes": [
								"[variables('vnetAddressPrefix')]"
							]
						},
						"subnets": [
							{
								"name": "[variables('jumpBoxSubnetName')]",
								"properties": {
									"addressPrefix": "[variables('jumpboxSubnetPrefix')]"
								}
							},
							{
								"name": "[variables('azureFirewallSubnetName')]",
								"properties": {
									"addressPrefix": "[variables('azureFirewallSubnetPrefix')]"
								}
							},
							{
								"name": "[variables('serverSubnetName')]",
								"properties": {
									"addressPrefix": "[variables('serverSubnetPrefix')]",
									"routeTable": {
										"id": "[resourceId('Microsoft.Network/routeTables', variables('azfwRouteTableName'))]"
									},
									"networkSecurityGroup": {
										"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
									}
								}
							},
							{
								"name": "[variables('clientSubnetName')]",
								"properties": {
									"addressPrefix": "[variables('clientSubnetPrefix')]",
									"routeTable": {
										"id": "[resourceId('Microsoft.Network/routeTables', variables('azfwRouteTableName'))]"
									},
									"networkSecurityGroup": {
										"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
									}
								}
							}
						]
					}
				},
				{
					"name": "[concat(variables('publicIPNamePrefix'), add(copyIndex(), 1))]",
					"type": "Microsoft.Network/publicIPAddresses",
					"apiVersion": "2020-05-01",
					"location": "[parameters('location')]",
					"sku": {
						"name": "Standard"
					},
					"copy": {
						"name": "publicIpCopy",
						"count": "[parameters('numberOfFirewallPublicIPAddresses')]"
					},
					"properties": {
						"publicIPAllocationMethod": "Static",
						"publicIPAddressVersion": "IPv4"
					}
				},
				{
					"name": "[variables('jumpBoxPublicIPAddressName')]",
					"type": "Microsoft.Network/publicIPAddresses",
					"apiVersion": "2020-05-01",
					"location": "[parameters('location')]",
					"properties": {
						"publicIPAllocationMethod": "Dynamic"
					}
				},
				{
					"apiVersion": "2020-05-01",
					"type": "Microsoft.Network/networkInterfaces",
					"name": "[variables('JumpBoxNicName')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpBoxPublicIPAddressName'))]",
						"[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
					],
					"properties": {
						"ipConfigurations": [
							{
								"name": "ipconfig1",
								"properties": {
									"privateIPAllocationMethod": "Static",
									"privateIPAddress": "[variables('jumpboxPrivateIp')]",
									"publicIPAddress": {
										"id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpBoxPublicIPAddressName'))]"
									},
									"subnet": {
										"id": "[variables('jumpBoxSubnetId')]"
									}
								}
							}
						]
					}
				},
				{
					"apiVersion": "2020-05-01",
					"type": "Microsoft.Network/networkInterfaces",
					"name": "[variables('ClientNicName')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
					],
					"properties": {
						"ipConfigurations": [
							{
								"name": "ipconfig1",
								"properties": {
									"privateIPAllocationMethod": "Static",
									"privateIPAddress": "[variables('clientPrivateIp')]",
									"subnet": {
										"id": "[variables('clientSubnetId')]"
									}
								}
							}
						]
					}
				},
				{
					"apiVersion": "2020-05-01",
					"type": "Microsoft.Network/networkInterfaces",
					"name": "[variables('ServerNicName')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
					],
					"properties": {
						"ipConfigurations": [
							{
								"name": "ipconfig1",
								"properties": {
									"privateIPAllocationMethod": "Static",
									"privateIPAddress": "[variables('serverPrivateIp')]",
									"subnet": {
										"id": "[variables('serverSubnetId')]"
									}
								}
							}
						]
					}
				},
				{
					"name": "JumpBox",
					"type": "Microsoft.Compute/virtualMachines",
					"apiVersion": "2019-12-01",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
						"[resourceId('Microsoft.Network/networkInterfaces', variables('JumpBoxNicName'))]"
					],
					"properties": {
						"hardwareProfile": {
							"vmSize": "[parameters('vmSize')]"
						},
						"storageProfile": {
							"imageReference": {
								"publisher": "Canonical",
								"offer": "UbuntuServer",
								"sku": "18.04-LTS",
								"version": "latest"
							},
							"osDisk": {
								"createOption": "FromImage"
							}
						},
						"osProfile": {
							"computerName": "JumpBox",
							"adminUsername": "[parameters('adminUsername')]",
							"adminPassword": "[parameters('adminPasswordOrKey')]",
							"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
						},
						"networkProfile": {
							"networkInterfaces": [
								{
									"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('JumpBoxNicName'))]"
								}
							]
						},
						"diagnosticsProfile": {
							"bootDiagnostics": {
								"enabled": true,
								"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]"
							}
						}
					}
				},
				{
					"name": "Client",
					"type": "Microsoft.Compute/virtualMachines",
					"apiVersion": "2019-12-01",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
						"[resourceId('Microsoft.Network/networkInterfaces', variables('ClientNicName'))]"
					],
					"properties": {
						"hardwareProfile": {
							"vmSize": "[parameters('vmSize')]"
						},
						"storageProfile": {
							"imageReference": {
								"publisher": "Canonical",
								"offer": "UbuntuServer",
								"sku": "18.04-LTS",
								"version": "latest"
							},
							"osDisk": {
								"createOption": "FromImage"
							}
						},
						"osProfile": {
							"computerName": "Server",
							"adminUsername": "[parameters('adminUsername')]",
							"adminPassword": "[parameters('adminPasswordOrKey')]",
							"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
						},
						"networkProfile": {
							"networkInterfaces": [
								{
									"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ClientNicName'))]"
								}
							]
						},
						"diagnosticsProfile": {
							"bootDiagnostics": {
								"enabled": true,
								"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]"
							}
						}
					}
				},
				{
					"name": "Server",
					"type": "Microsoft.Compute/virtualMachines",
					"apiVersion": "2019-12-01",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
						"[resourceId('Microsoft.Network/networkInterfaces', variables('ServerNicName'))]"
					],
					"properties": {
						"hardwareProfile": {
							"vmSize": "[parameters('vmSize')]"
						},
						"storageProfile": {
							"imageReference": {
								"publisher": "Canonical",
								"offer": "UbuntuServer",
								"sku": "18.04-LTS",
								"version": "latest"
							},
							"osDisk": {
								"createOption": "FromImage"
							}
						},
						"osProfile": {
							"computerName": "Server",
							"adminUsername": "[parameters('adminUsername')]",
							"adminPassword": "[parameters('adminPasswordOrKey')]",
							"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
						},
						"networkProfile": {
							"networkInterfaces": [
								{
									"id": "[resourceId('Microsoft.Network/networkInterfaces', variables('ServerNicName'))]"
								}
							]
						},
						"diagnosticsProfile": {
							"bootDiagnostics": {
								"enabled": true,
								"storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]"
							}
						}
					}
				},
				{
      		"type": "Microsoft.Network/firewallPolicies",
      		"apiVersion": "2020-07-01",
      		"name": "DemoFirewallPolicy",
      		"location": "[parameters('location')]",
      		"identity": {
        		"type": "UserAssigned",
        		"userAssignedIdentities": {
          		"[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity'))]": {}
        		}
      		},
      		"properties": {
        		"sku": {
          		"tier": "Premium"
        		},
        		"transportSecurity": {
          		"certificateAuthority": {
            		"name": "[variables('keyVaultCASecretName')]",
            		"keyVaultSecretId": "[format('{0}secrets/{1}/', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2019-09-01').vaultUri, variables('keyVaultCASecretName'))]"
          		}
        		},
        		"intrusionDetection": {
          		"mode": "Alert",
          		"configuration": {
            		"signatureOverrides": [
              		{
                		"id": "[parameters('sigOverrideParam1')]",
                		"mode": "Deny"
              		},
              		{
                		"id": "[parameters('sigOverrideParam2')]",
                		"mode": "Alert"
             	 		}
            		],
            		"bypassTrafficSettings": [
              		{
                		"name": "SecretBypass",
                		"protocol": "TCP",
                		"sourceAddresses": [
                  		"*"
                		],
                		"destinationAddresses": [
                  		"1.1.1.1"
                		],
                		"destinationPorts": [
                  		"80"
                		]
             		 	}
            		]
          		}
        		}
      		},
      		"dependsOn": [
        		"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'DemoIdentity')]",
        		"[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        		"[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultCASecretName'))]"
      		]
				},
				{
      			"type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
      			"apiVersion": "2020-07-01",
      			"name": "[format('{0}/{1}', 'DemoFirewallPolicy', 'PolicyRules')]",
      			"location": "[parameters('location')]",
      			"properties": {
        			"priority": 200,
        			"ruleCollections": [
          			{
            			"name": "AllowWeb",
            			"priority": 101,
            			"ruleCollectionType": "FirewallPolicyFilterRuleCollection",
            			"action": {
              			"type": "Allow"
            			},
            			"rules": [
              			{	
                			"ruleType": "ApplicationRule",
                			"name": "AllowAzure",
                			"protocols": [
                  			{
                    			"protocolType": "Https",
                    			"port": 443
                 		 		}
                			],
                			"targetFqdns": [
                  			"*azure.com",
                  			"*microsoft.com"
                			],
                			"sourceAddresses": [
                  			"*"
                			],
                			"terminateTLS": true
              			},
              			{
                			"ruleType": "ApplicationRule",
                			"name": "AllowNews",
                			"protocols": [
                  			{
                    			"protocolType": "Https",
                    			"port": 443
                  			}
                			],
                			"webCategories": [
                  			"business",
                  			"webbasedemail"
                			],
                			"sourceAddresses": [
                  			"*"
                			],
                			"terminateTLS": true
             		 		}
           		 		]
          			},
          			{
            			"name": "BlockPage",
            			"priority": 100,
            			"ruleCollectionType": "FirewallPolicyFilterRuleCollection",
            			"action": {
              			"type": "Deny"
            			},
            			"rules": [
              			{
                		"ruleType": "ApplicationRule",
                		"name": "BlockAzureEvents",
                		"protocols": [
                  		{
                    		"protocolType": "Https",
                    		"port": 443
                  		}
                		],
                		"targetUrls": [
                  		"azure.microsoft.com/en-us/community/events",
                  		"azure.microsoft.com/en-us/community/events/*"
                		],
                		"sourceAddresses": [
                  		"*"
                		],
                		"terminateTLS": true
              		}
            		]
          		}
        		]
      		},
      		"dependsOn": [
        		"[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]"
      		]
				},
				{
					"apiVersion": "2020-04-01",
					"type": "Microsoft.Network/azureFirewalls",
					"name": "[variables('firewallName')]",
					"location": "[parameters('location')]",
					"properties": {
						"ipConfigurations": "[variables('azureFirewallIpConfigurations')]",
						"firewallPolicy": {
          		"id": "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]"
        		},
						"sku": {
          		"name": "AZFW_VNet",
          		"tier": "Premium"
        		}
					},
			    "dependsOn": [
      		  "[resourceId('Microsoft.Network/firewallPolicies', 'DemoFirewallPolicy')]",
        		"[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', 'DemoFirewallPolicy', 'PolicyRules')]",
						"[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
						"publicIpCopy"
     			 ]
				}
			]
		}
	}
}
