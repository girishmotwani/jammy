# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6349, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AadAuthenticationParameters(msrest.serialization.Model):
    """AAD Vpn authentication type related parameters.

    :param aad_tenant: AAD Vpn authentication parameter AAD tenant.
    :type aad_tenant: str
    :param aad_audience: AAD Vpn authentication parameter AAD audience.
    :type aad_audience: str
    :param aad_issuer: AAD Vpn authentication parameter AAD issuer.
    :type aad_issuer: str
    """

    _attribute_map = {
        'aad_tenant': {'key': 'aadTenant', 'type': 'str'},
        'aad_audience': {'key': 'aadAudience', 'type': 'str'},
        'aad_issuer': {'key': 'aadIssuer', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AadAuthenticationParameters, self).__init__(**kwargs)
        self.aad_tenant = kwargs.get('aad_tenant', None)
        self.aad_audience = kwargs.get('aad_audience', None)
        self.aad_issuer = kwargs.get('aad_issuer', None)


class AddressSpace(msrest.serialization.Model):
    """AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.

    :param address_prefixes: A list of address blocks reserved for this virtual network in CIDR
     notation.
    :type address_prefixes: list[str]
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AddressSpace, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)


class ApplicationGatewayBackendAddress(msrest.serialization.Model):
    """Backend address of an application gateway.

    :param fqdn: Fully qualified domain name (FQDN).
    :type fqdn: str
    :param ip_address: IP address.
    :type ip_address: str
    """

    _attribute_map = {
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationGatewayBackendAddress, self).__init__(**kwargs)
        self.fqdn = kwargs.get('fqdn', None)
        self.ip_address = kwargs.get('ip_address', None)


class SubResource(msrest.serialization.Model):
    """Reference to another subresource.

    :param id: Resource ID.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SubResource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ApplicationGatewayBackendAddressPool(SubResource):
    """Backend Address Pool of an application gateway.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: Name of the backend address pool that is unique within an Application Gateway.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :ivar backend_ip_configurations: Collection of references to IPs defined in network interfaces.
    :vartype backend_ip_configurations:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterfaceIPConfiguration]
    :param backend_addresses: Backend addresses.
    :type backend_addresses:
     list[~virtual_wan_as_aservice_management_client.models.ApplicationGatewayBackendAddress]
    :ivar provisioning_state: The provisioning state of the backend address pool resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'backend_ip_configurations': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'backend_ip_configurations': {'key': 'properties.backendIPConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'backend_addresses': {'key': 'properties.backendAddresses', 'type': '[ApplicationGatewayBackendAddress]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationGatewayBackendAddressPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.backend_ip_configurations = None
        self.backend_addresses = kwargs.get('backend_addresses', None)
        self.provisioning_state = None


class Resource(msrest.serialization.Model):
    """Common resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)


class ApplicationSecurityGroup(Resource):
    """An application security group in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar resource_guid: The resource GUID property of the application security group resource. It
     uniquely identifies a resource, even if the user changes its name or migrate the resource
     across subscriptions or resource groups.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the application security group resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationSecurityGroup, self).__init__(**kwargs)
        self.etag = None
        self.resource_guid = None
        self.provisioning_state = None


class BackendAddressPool(SubResource):
    """Pool of backend IP addresses.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within the set of backend address pools
     used by the load balancer. This name can be used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :param location: The location of the backend address pool.
    :type location: str
    :param load_balancer_backend_addresses: An array of backend addresses.
    :type load_balancer_backend_addresses:
     list[~virtual_wan_as_aservice_management_client.models.LoadBalancerBackendAddress]
    :ivar backend_ip_configurations: An array of references to IP addresses defined in network
     interfaces.
    :vartype backend_ip_configurations:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterfaceIPConfiguration]
    :ivar load_balancing_rules: An array of references to load balancing rules that use this
     backend address pool.
    :vartype load_balancing_rules:
     list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar outbound_rule: A reference to an outbound rule that uses this backend address pool.
    :vartype outbound_rule: ~virtual_wan_as_aservice_management_client.models.SubResource
    :ivar outbound_rules: An array of references to outbound rules that use this backend address
     pool.
    :vartype outbound_rules: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar provisioning_state: The provisioning state of the backend address pool resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'backend_ip_configurations': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
        'outbound_rule': {'readonly': True},
        'outbound_rules': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'str'},
        'load_balancer_backend_addresses': {'key': 'properties.loadBalancerBackendAddresses', 'type': '[LoadBalancerBackendAddress]'},
        'backend_ip_configurations': {'key': 'properties.backendIPConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'outbound_rule': {'key': 'properties.outboundRule', 'type': 'SubResource'},
        'outbound_rules': {'key': 'properties.outboundRules', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BackendAddressPool, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.load_balancer_backend_addresses = kwargs.get('load_balancer_backend_addresses', None)
        self.backend_ip_configurations = None
        self.load_balancing_rules = None
        self.outbound_rule = None
        self.outbound_rules = None
        self.provisioning_state = None


class BgpConnection(SubResource):
    """Virtual Appliance Site resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: Name of the connection.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Connection type.
    :vartype type: str
    :param peer_asn: Peer ASN.
    :type peer_asn: long
    :param peer_ip: Peer IP.
    :type peer_ip: str
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :ivar connection_state: The current state of the VirtualHub to Peer. Possible values include:
     "Unknown", "Connecting", "Connected", "NotConnected".
    :vartype connection_state: str or
     ~virtual_wan_as_aservice_management_client.models.HubBgpConnectionStatus
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'peer_asn': {'maximum': 4294967295, 'minimum': 0},
        'provisioning_state': {'readonly': True},
        'connection_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'peer_asn': {'key': 'properties.peerAsn', 'type': 'long'},
        'peer_ip': {'key': 'properties.peerIp', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'connection_state': {'key': 'properties.connectionState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BgpConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.peer_asn = kwargs.get('peer_asn', None)
        self.peer_ip = kwargs.get('peer_ip', None)
        self.provisioning_state = None
        self.connection_state = None


class BgpSettings(msrest.serialization.Model):
    """BGP settings details.

    :param asn: The BGP speaker's ASN.
    :type asn: long
    :param bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
    :type bgp_peering_address: str
    :param peer_weight: The weight added to routes learned from this BGP speaker.
    :type peer_weight: int
    :param bgp_peering_addresses: BGP peering address with IP configuration ID for virtual network
     gateway.
    :type bgp_peering_addresses:
     list[~virtual_wan_as_aservice_management_client.models.IPConfigurationBgpPeeringAddress]
    """

    _validation = {
        'asn': {'maximum': 4294967295, 'minimum': 0},
    }

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'long'},
        'bgp_peering_address': {'key': 'bgpPeeringAddress', 'type': 'str'},
        'peer_weight': {'key': 'peerWeight', 'type': 'int'},
        'bgp_peering_addresses': {'key': 'bgpPeeringAddresses', 'type': '[IPConfigurationBgpPeeringAddress]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BgpSettings, self).__init__(**kwargs)
        self.asn = kwargs.get('asn', None)
        self.bgp_peering_address = kwargs.get('bgp_peering_address', None)
        self.peer_weight = kwargs.get('peer_weight', None)
        self.bgp_peering_addresses = kwargs.get('bgp_peering_addresses', None)


class CloudError(msrest.serialization.Model):
    """An error response from the service.

    :param error: Cloud error body.
    :type error: ~virtual_wan_as_aservice_management_client.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudError, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the service.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~virtual_wan_as_aservice_management_client.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class CustomDnsConfigPropertiesFormat(msrest.serialization.Model):
    """Contains custom Dns resolution configuration from customer.

    :param fqdn: Fqdn that resolves to private endpoint ip address.
    :type fqdn: str
    :param ip_addresses: A list of private ip addresses of the private endpoint.
    :type ip_addresses: list[str]
    """

    _attribute_map = {
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CustomDnsConfigPropertiesFormat, self).__init__(**kwargs)
        self.fqdn = kwargs.get('fqdn', None)
        self.ip_addresses = kwargs.get('ip_addresses', None)


class DdosSettings(msrest.serialization.Model):
    """Contains the DDoS protection settings of the public IP.

    :param ddos_custom_policy: The DDoS custom policy associated with the public IP.
    :type ddos_custom_policy: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param protection_coverage: The DDoS protection policy customizability of the public IP. Only
     standard coverage will have the ability to be customized. Possible values include: "Basic",
     "Standard".
    :type protection_coverage: str or
     ~virtual_wan_as_aservice_management_client.models.DdosSettingsProtectionCoverage
    :param protected_ip: Enables DDoS protection on the public IP.
    :type protected_ip: bool
    """

    _attribute_map = {
        'ddos_custom_policy': {'key': 'ddosCustomPolicy', 'type': 'SubResource'},
        'protection_coverage': {'key': 'protectionCoverage', 'type': 'str'},
        'protected_ip': {'key': 'protectedIP', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DdosSettings, self).__init__(**kwargs)
        self.ddos_custom_policy = kwargs.get('ddos_custom_policy', None)
        self.protection_coverage = kwargs.get('protection_coverage', None)
        self.protected_ip = kwargs.get('protected_ip', None)


class Delegation(SubResource):
    """Details the service to which the subnet is delegated.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a subnet. This name can be used to
     access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param service_name: The name of the service to whom the subnet should be delegated (e.g.
     Microsoft.Sql/servers).
    :type service_name: str
    :ivar actions: The actions permitted to the service upon delegation.
    :vartype actions: list[str]
    :ivar provisioning_state: The provisioning state of the service delegation resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'actions': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'service_name': {'key': 'properties.serviceName', 'type': 'str'},
        'actions': {'key': 'properties.actions', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Delegation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.service_name = kwargs.get('service_name', None)
        self.actions = None
        self.provisioning_state = None


class DeviceProperties(msrest.serialization.Model):
    """List of properties of the device.

    :param device_vendor: Name of the device Vendor.
    :type device_vendor: str
    :param device_model: Model of the device.
    :type device_model: str
    :param link_speed_in_mbps: Link speed.
    :type link_speed_in_mbps: int
    """

    _attribute_map = {
        'device_vendor': {'key': 'deviceVendor', 'type': 'str'},
        'device_model': {'key': 'deviceModel', 'type': 'str'},
        'link_speed_in_mbps': {'key': 'linkSpeedInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeviceProperties, self).__init__(**kwargs)
        self.device_vendor = kwargs.get('device_vendor', None)
        self.device_model = kwargs.get('device_model', None)
        self.link_speed_in_mbps = kwargs.get('link_speed_in_mbps', None)


class EffectiveRoutesParameters(msrest.serialization.Model):
    """The parameters specifying the resource whose effective routes are being requested.

    :param resource_id: The resource whose effective routes are being requested.
    :type resource_id: str
    :param virtual_wan_resource_type: The type of the specified resource like RouteTable,
     ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection and P2SConnection.
    :type virtual_wan_resource_type: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'virtual_wan_resource_type': {'key': 'virtualWanResourceType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EffectiveRoutesParameters, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)
        self.virtual_wan_resource_type = kwargs.get('virtual_wan_resource_type', None)


class Error(msrest.serialization.Model):
    """Common error representation.

    :param code: Error code.
    :type code: str
    :param message: Error message.
    :type message: str
    :param target: Error target.
    :type target: str
    :param details: Error details.
    :type details: list[~virtual_wan_as_aservice_management_client.models.ErrorDetails]
    :param inner_error: Inner error message.
    :type inner_error: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.inner_error = kwargs.get('inner_error', None)


class ErrorDetails(msrest.serialization.Model):
    """Common error details representation.

    :param code: Error code.
    :type code: str
    :param target: Error target.
    :type target: str
    :param message: Error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.target = kwargs.get('target', None)
        self.message = kwargs.get('message', None)


class ExpressRouteCircuitPeeringId(msrest.serialization.Model):
    """ExpressRoute circuit peering identifier.

    :param id: The ID of the ExpressRoute circuit peering.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteCircuitPeeringId, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ExpressRouteConnection(SubResource):
    """ExpressRouteConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Resource ID.
    :type id: str
    :param name: Required. The name of the resource.
    :type name: str
    :ivar provisioning_state: The provisioning state of the express route connection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param express_route_circuit_peering: The ExpressRoute circuit peering.
    :type express_route_circuit_peering:
     ~virtual_wan_as_aservice_management_client.models.ExpressRouteCircuitPeeringId
    :param authorization_key: Authorization key to establish the connection.
    :type authorization_key: str
    :param routing_weight: The routing weight associated to the connection.
    :type routing_weight: int
    :param enable_internet_security: Enable internet security.
    :type enable_internet_security: bool
    :param express_route_gateway_bypass: Enable FastPath to vWan Firewall hub.
    :type express_route_gateway_bypass: bool
    :param routing_configuration: The Routing Configuration indicating the associated and
     propagated route tables on this connection.
    :type routing_configuration:
     ~virtual_wan_as_aservice_management_client.models.RoutingConfiguration
    """

    _validation = {
        'name': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'express_route_circuit_peering': {'key': 'properties.expressRouteCircuitPeering', 'type': 'ExpressRouteCircuitPeeringId'},
        'authorization_key': {'key': 'properties.authorizationKey', 'type': 'str'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'express_route_gateway_bypass': {'key': 'properties.expressRouteGatewayBypass', 'type': 'bool'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteConnection, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.provisioning_state = None
        self.express_route_circuit_peering = kwargs.get('express_route_circuit_peering', None)
        self.authorization_key = kwargs.get('authorization_key', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.express_route_gateway_bypass = kwargs.get('express_route_gateway_bypass', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)


class ExpressRouteConnectionId(msrest.serialization.Model):
    """The ID of the ExpressRouteConnection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ID of the ExpressRouteConnection.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteConnectionId, self).__init__(**kwargs)
        self.id = None


class ExpressRouteConnectionList(msrest.serialization.Model):
    """ExpressRouteConnection list.

    :param value: The list of ExpressRoute connections.
    :type value: list[~virtual_wan_as_aservice_management_client.models.ExpressRouteConnection]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteConnection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteConnectionList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ExpressRouteGateway(Resource):
    """ExpressRoute gateway resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param auto_scale_configuration: Configuration for auto scaling.
    :type auto_scale_configuration:
     ~virtual_wan_as_aservice_management_client.models.ExpressRouteGatewayPropertiesAutoScaleConfiguration
    :ivar express_route_connections: List of ExpressRoute connections to the ExpressRoute gateway.
    :vartype express_route_connections:
     list[~virtual_wan_as_aservice_management_client.models.ExpressRouteConnection]
    :ivar provisioning_state: The provisioning state of the express route gateway resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param virtual_hub: The Virtual Hub where the ExpressRoute gateway is or will be deployed.
    :type virtual_hub: ~virtual_wan_as_aservice_management_client.models.VirtualHubId
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'express_route_connections': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'auto_scale_configuration': {'key': 'properties.autoScaleConfiguration', 'type': 'ExpressRouteGatewayPropertiesAutoScaleConfiguration'},
        'express_route_connections': {'key': 'properties.expressRouteConnections', 'type': '[ExpressRouteConnection]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'VirtualHubId'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteGateway, self).__init__(**kwargs)
        self.etag = None
        self.auto_scale_configuration = kwargs.get('auto_scale_configuration', None)
        self.express_route_connections = None
        self.provisioning_state = None
        self.virtual_hub = kwargs.get('virtual_hub', None)


class ExpressRouteGatewayList(msrest.serialization.Model):
    """List of ExpressRoute gateways.

    :param value: List of ExpressRoute gateways.
    :type value: list[~virtual_wan_as_aservice_management_client.models.ExpressRouteGateway]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExpressRouteGateway]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteGatewayList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ExpressRouteGatewayPropertiesAutoScaleConfiguration(msrest.serialization.Model):
    """Configuration for auto scaling.

    :param bounds: Minimum and maximum number of scale units to deploy.
    :type bounds:
     ~virtual_wan_as_aservice_management_client.models.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds
    """

    _attribute_map = {
        'bounds': {'key': 'bounds', 'type': 'ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteGatewayPropertiesAutoScaleConfiguration, self).__init__(**kwargs)
        self.bounds = kwargs.get('bounds', None)


class ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds(msrest.serialization.Model):
    """Minimum and maximum number of scale units to deploy.

    :param min: Minimum number of scale units deployed for ExpressRoute gateway.
    :type min: int
    :param max: Maximum number of scale units deployed for ExpressRoute gateway.
    :type max: int
    """

    _attribute_map = {
        'min': {'key': 'min', 'type': 'int'},
        'max': {'key': 'max', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds, self).__init__(**kwargs)
        self.min = kwargs.get('min', None)
        self.max = kwargs.get('max', None)


class ExtendedLocation(msrest.serialization.Model):
    """ExtendedLocation complex type.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the extended location.
    :type name: str
    :param type: Required. The type of the extended location. Possible values include: "EdgeZone".
    :type type: str or ~virtual_wan_as_aservice_management_client.models.ExtendedLocationTypes
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExtendedLocation, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.type = kwargs['type']


class FlowLog(Resource):
    """A flow log resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param target_resource_id: ID of network security group to which flow log will be applied.
    :type target_resource_id: str
    :ivar target_resource_guid: Guid of network security group to which flow log will be applied.
    :vartype target_resource_guid: str
    :param storage_id: ID of the storage account which is used to store the flow log.
    :type storage_id: str
    :param enabled: Flag to enable/disable flow logging.
    :type enabled: bool
    :param retention_policy: Parameters that define the retention policy for flow log.
    :type retention_policy:
     ~virtual_wan_as_aservice_management_client.models.RetentionPolicyParameters
    :param format: Parameters that define the flow log format.
    :type format: ~virtual_wan_as_aservice_management_client.models.FlowLogFormatParameters
    :param flow_analytics_configuration: Parameters that define the configuration of traffic
     analytics.
    :type flow_analytics_configuration:
     ~virtual_wan_as_aservice_management_client.models.TrafficAnalyticsProperties
    :ivar provisioning_state: The provisioning state of the flow log. Possible values include:
     "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'target_resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'target_resource_id': {'key': 'properties.targetResourceId', 'type': 'str'},
        'target_resource_guid': {'key': 'properties.targetResourceGuid', 'type': 'str'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'retention_policy': {'key': 'properties.retentionPolicy', 'type': 'RetentionPolicyParameters'},
        'format': {'key': 'properties.format', 'type': 'FlowLogFormatParameters'},
        'flow_analytics_configuration': {'key': 'properties.flowAnalyticsConfiguration', 'type': 'TrafficAnalyticsProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FlowLog, self).__init__(**kwargs)
        self.etag = None
        self.target_resource_id = kwargs.get('target_resource_id', None)
        self.target_resource_guid = None
        self.storage_id = kwargs.get('storage_id', None)
        self.enabled = kwargs.get('enabled', None)
        self.retention_policy = kwargs.get('retention_policy', None)
        self.format = kwargs.get('format', None)
        self.flow_analytics_configuration = kwargs.get('flow_analytics_configuration', None)
        self.provisioning_state = None


class FlowLogFormatParameters(msrest.serialization.Model):
    """Parameters that define the flow log format.

    :param type: The file type of flow log. Possible values include: "JSON".
    :type type: str or ~virtual_wan_as_aservice_management_client.models.FlowLogFormatType
    :param version: The version (revision) of the flow log.
    :type version: int
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FlowLogFormatParameters, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.version = kwargs.get('version', 0)


class FrontendIPConfiguration(SubResource):
    """Frontend IP address of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within the set of frontend IP
     configurations used by the load balancer. This name can be used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :param zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :type zones: list[str]
    :ivar inbound_nat_rules: An array of references to inbound rules that use this frontend IP.
    :vartype inbound_nat_rules: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar inbound_nat_pools: An array of references to inbound pools that use this frontend IP.
    :vartype inbound_nat_pools: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar outbound_rules: An array of references to outbound rules that use this frontend IP.
    :vartype outbound_rules: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar load_balancing_rules: An array of references to load balancing rules that use this
     frontend IP.
    :vartype load_balancing_rules:
     list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :param private_ip_address: The private IP address of the IP configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: The Private IP allocation method. Possible values include:
     "Static", "Dynamic".
    :type private_ip_allocation_method: str or
     ~virtual_wan_as_aservice_management_client.models.IPAllocationMethod
    :param private_ip_address_version: Whether the specific ipconfiguration is IPv4 or IPv6.
     Default is taken as IPv4. Possible values include: "IPv4", "IPv6".
    :type private_ip_address_version: str or
     ~virtual_wan_as_aservice_management_client.models.IPVersion
    :param subnet: The reference to the subnet resource.
    :type subnet: ~virtual_wan_as_aservice_management_client.models.Subnet
    :param public_ip_address: The reference to the Public IP resource.
    :type public_ip_address: ~virtual_wan_as_aservice_management_client.models.PublicIPAddress
    :param public_ip_prefix: The reference to the Public IP Prefix resource.
    :type public_ip_prefix: ~virtual_wan_as_aservice_management_client.models.SubResource
    :ivar provisioning_state: The provisioning state of the frontend IP configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'inbound_nat_rules': {'readonly': True},
        'inbound_nat_pools': {'readonly': True},
        'outbound_rules': {'readonly': True},
        'load_balancing_rules': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'inbound_nat_rules': {'key': 'properties.inboundNatRules', 'type': '[SubResource]'},
        'inbound_nat_pools': {'key': 'properties.inboundNatPools', 'type': '[SubResource]'},
        'outbound_rules': {'key': 'properties.outboundRules', 'type': '[SubResource]'},
        'load_balancing_rules': {'key': 'properties.loadBalancingRules', 'type': '[SubResource]'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'private_ip_address_version': {'key': 'properties.privateIPAddressVersion', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'public_ip_prefix': {'key': 'properties.publicIPPrefix', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FrontendIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.zones = kwargs.get('zones', None)
        self.inbound_nat_rules = None
        self.inbound_nat_pools = None
        self.outbound_rules = None
        self.load_balancing_rules = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.private_ip_address_version = kwargs.get('private_ip_address_version', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.public_ip_prefix = kwargs.get('public_ip_prefix', None)
        self.provisioning_state = None


class GetVpnSitesConfigurationRequest(msrest.serialization.Model):
    """List of Vpn-Sites.

    All required parameters must be populated in order to send to Azure.

    :param vpn_sites: List of resource-ids of the vpn-sites for which config is to be downloaded.
    :type vpn_sites: list[str]
    :param output_blob_sas_url: Required. The sas-url to download the configurations for vpn-sites.
    :type output_blob_sas_url: str
    """

    _validation = {
        'output_blob_sas_url': {'required': True},
    }

    _attribute_map = {
        'vpn_sites': {'key': 'vpnSites', 'type': '[str]'},
        'output_blob_sas_url': {'key': 'outputBlobSasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GetVpnSitesConfigurationRequest, self).__init__(**kwargs)
        self.vpn_sites = kwargs.get('vpn_sites', None)
        self.output_blob_sas_url = kwargs['output_blob_sas_url']


class HubIpConfiguration(SubResource):
    """IpConfigurations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: Name of the Ip Configuration.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Ipconfiguration type.
    :vartype type: str
    :param private_ip_address: The private IP address of the IP configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :type private_ip_allocation_method: str or
     ~virtual_wan_as_aservice_management_client.models.IPAllocationMethod
    :param subnet: The reference to the subnet resource.
    :type subnet: ~virtual_wan_as_aservice_management_client.models.Subnet
    :param public_ip_address: The reference to the public IP resource.
    :type public_ip_address: ~virtual_wan_as_aservice_management_client.models.PublicIPAddress
    :ivar provisioning_state: The provisioning state of the IP configuration resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HubIpConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None


class HubRoute(msrest.serialization.Model):
    """RouteTable route.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the Route that is unique within a RouteTable. This name can
     be used to access this route.
    :type name: str
    :param destination_type: Required. The type of destinations (eg: CIDR, ResourceId, Service).
    :type destination_type: str
    :param destinations: Required. List of all destinations.
    :type destinations: list[str]
    :param next_hop_type: Required. The type of next hop (eg: ResourceId).
    :type next_hop_type: str
    :param next_hop: Required. NextHop resource ID.
    :type next_hop: str
    """

    _validation = {
        'name': {'required': True},
        'destination_type': {'required': True},
        'destinations': {'required': True},
        'next_hop_type': {'required': True},
        'next_hop': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'destination_type': {'key': 'destinationType', 'type': 'str'},
        'destinations': {'key': 'destinations', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HubRoute, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.destination_type = kwargs['destination_type']
        self.destinations = kwargs['destinations']
        self.next_hop_type = kwargs['next_hop_type']
        self.next_hop = kwargs['next_hop']


class HubRouteTable(SubResource):
    """RouteTable resource in a virtual hub.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :param routes: List of all routes.
    :type routes: list[~virtual_wan_as_aservice_management_client.models.HubRoute]
    :param labels: List of labels associated with this route table.
    :type labels: list[str]
    :ivar associated_connections: List of all connections associated with this route table.
    :vartype associated_connections: list[str]
    :ivar propagating_connections: List of all connections that advertise to this route table.
    :vartype propagating_connections: list[str]
    :ivar provisioning_state: The provisioning state of the RouteTable resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'associated_connections': {'readonly': True},
        'propagating_connections': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[HubRoute]'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'associated_connections': {'key': 'properties.associatedConnections', 'type': '[str]'},
        'propagating_connections': {'key': 'properties.propagatingConnections', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HubRouteTable, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.routes = kwargs.get('routes', None)
        self.labels = kwargs.get('labels', None)
        self.associated_connections = None
        self.propagating_connections = None
        self.provisioning_state = None


class HubVirtualNetworkConnection(SubResource):
    """HubVirtualNetworkConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param remote_virtual_network: Reference to the remote virtual network.
    :type remote_virtual_network: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param allow_hub_to_remote_vnet_transit: Deprecated: VirtualHub to RemoteVnet transit to
     enabled or not.
    :type allow_hub_to_remote_vnet_transit: bool
    :param allow_remote_vnet_to_use_hub_vnet_gateways: Deprecated: Allow RemoteVnet to use Virtual
     Hub's gateways.
    :type allow_remote_vnet_to_use_hub_vnet_gateways: bool
    :param enable_internet_security: Enable internet security.
    :type enable_internet_security: bool
    :param routing_configuration: The Routing Configuration indicating the associated and
     propagated route tables on this connection.
    :type routing_configuration:
     ~virtual_wan_as_aservice_management_client.models.RoutingConfiguration
    :ivar provisioning_state: The provisioning state of the hub virtual network connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'remote_virtual_network': {'key': 'properties.remoteVirtualNetwork', 'type': 'SubResource'},
        'allow_hub_to_remote_vnet_transit': {'key': 'properties.allowHubToRemoteVnetTransit', 'type': 'bool'},
        'allow_remote_vnet_to_use_hub_vnet_gateways': {'key': 'properties.allowRemoteVnetToUseHubVnetGateways', 'type': 'bool'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HubVirtualNetworkConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.remote_virtual_network = kwargs.get('remote_virtual_network', None)
        self.allow_hub_to_remote_vnet_transit = kwargs.get('allow_hub_to_remote_vnet_transit', None)
        self.allow_remote_vnet_to_use_hub_vnet_gateways = kwargs.get('allow_remote_vnet_to_use_hub_vnet_gateways', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)
        self.provisioning_state = None


class InboundNatRule(SubResource):
    """Inbound NAT rule of the load balancer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within the set of inbound NAT rules used
     by the load balancer. This name can be used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Type of the resource.
    :vartype type: str
    :param frontend_ip_configuration: A reference to frontend IP addresses.
    :type frontend_ip_configuration: ~virtual_wan_as_aservice_management_client.models.SubResource
    :ivar backend_ip_configuration: A reference to a private IP address defined on a network
     interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations
     is forwarded to the backend IP.
    :vartype backend_ip_configuration:
     ~virtual_wan_as_aservice_management_client.models.NetworkInterfaceIPConfiguration
    :param protocol: The reference to the transport protocol used by the load balancing rule.
     Possible values include: "Udp", "Tcp", "All".
    :type protocol: str or ~virtual_wan_as_aservice_management_client.models.TransportProtocol
    :param frontend_port: The port for the external endpoint. Port numbers for each rule must be
     unique within the Load Balancer. Acceptable values range from 1 to 65534.
    :type frontend_port: int
    :param backend_port: The port used for the internal endpoint. Acceptable values range from 1 to
     65535.
    :type backend_port: int
    :param idle_timeout_in_minutes: The timeout for the TCP idle connection. The value can be set
     between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the
     protocol is set to TCP.
    :type idle_timeout_in_minutes: int
    :param enable_floating_ip: Configures a virtual machine's endpoint for the floating IP
     capability required to configure a SQL AlwaysOn Availability Group. This setting is required
     when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed
     after you create the endpoint.
    :type enable_floating_ip: bool
    :param enable_tcp_reset: Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
     connection termination. This element is only used when the protocol is set to TCP.
    :type enable_tcp_reset: bool
    :ivar provisioning_state: The provisioning state of the inbound NAT rule resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'backend_ip_configuration': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frontend_ip_configuration': {'key': 'properties.frontendIPConfiguration', 'type': 'SubResource'},
        'backend_ip_configuration': {'key': 'properties.backendIPConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'frontend_port': {'key': 'properties.frontendPort', 'type': 'int'},
        'backend_port': {'key': 'properties.backendPort', 'type': 'int'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'enable_floating_ip': {'key': 'properties.enableFloatingIP', 'type': 'bool'},
        'enable_tcp_reset': {'key': 'properties.enableTcpReset', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(InboundNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.frontend_ip_configuration = kwargs.get('frontend_ip_configuration', None)
        self.backend_ip_configuration = None
        self.protocol = kwargs.get('protocol', None)
        self.frontend_port = kwargs.get('frontend_port', None)
        self.backend_port = kwargs.get('backend_port', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.enable_floating_ip = kwargs.get('enable_floating_ip', None)
        self.enable_tcp_reset = kwargs.get('enable_tcp_reset', None)
        self.provisioning_state = None


class IPConfiguration(SubResource):
    """IP configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param private_ip_address: The private IP address of the IP configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :type private_ip_allocation_method: str or
     ~virtual_wan_as_aservice_management_client.models.IPAllocationMethod
    :param subnet: The reference to the subnet resource.
    :type subnet: ~virtual_wan_as_aservice_management_client.models.Subnet
    :param public_ip_address: The reference to the public IP resource.
    :type public_ip_address: ~virtual_wan_as_aservice_management_client.models.PublicIPAddress
    :ivar provisioning_state: The provisioning state of the IP configuration resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.provisioning_state = None


class IPConfigurationBgpPeeringAddress(msrest.serialization.Model):
    """Properties of IPConfigurationBgpPeeringAddress.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param ipconfiguration_id: The ID of IP configuration which belongs to gateway.
    :type ipconfiguration_id: str
    :ivar default_bgp_ip_addresses: The list of default BGP peering addresses which belong to IP
     configuration.
    :vartype default_bgp_ip_addresses: list[str]
    :param custom_bgp_ip_addresses: The list of custom BGP peering addresses which belong to IP
     configuration.
    :type custom_bgp_ip_addresses: list[str]
    :ivar tunnel_ip_addresses: The list of tunnel public IP addresses which belong to IP
     configuration.
    :vartype tunnel_ip_addresses: list[str]
    """

    _validation = {
        'default_bgp_ip_addresses': {'readonly': True},
        'tunnel_ip_addresses': {'readonly': True},
    }

    _attribute_map = {
        'ipconfiguration_id': {'key': 'ipconfigurationId', 'type': 'str'},
        'default_bgp_ip_addresses': {'key': 'defaultBgpIpAddresses', 'type': '[str]'},
        'custom_bgp_ip_addresses': {'key': 'customBgpIpAddresses', 'type': '[str]'},
        'tunnel_ip_addresses': {'key': 'tunnelIpAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IPConfigurationBgpPeeringAddress, self).__init__(**kwargs)
        self.ipconfiguration_id = kwargs.get('ipconfiguration_id', None)
        self.default_bgp_ip_addresses = None
        self.custom_bgp_ip_addresses = kwargs.get('custom_bgp_ip_addresses', None)
        self.tunnel_ip_addresses = None


class IPConfigurationProfile(SubResource):
    """IP configuration profile child resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource. This name can be used to access the resource.
    :type name: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param subnet: The reference to the subnet resource to create a container network interface ip
     configuration.
    :type subnet: ~virtual_wan_as_aservice_management_client.models.Subnet
    :ivar provisioning_state: The provisioning state of the IP configuration profile resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IPConfigurationProfile, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.subnet = kwargs.get('subnet', None)
        self.provisioning_state = None


class IpsecPolicy(msrest.serialization.Model):
    """An IPSec Policy configuration for a virtual network gateway connection.

    All required parameters must be populated in order to send to Azure.

    :param sa_life_time_seconds: Required. The IPSec Security Association (also called Quick Mode
     or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
    :type sa_life_time_seconds: int
    :param sa_data_size_kilobytes: Required. The IPSec Security Association (also called Quick Mode
     or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
    :type sa_data_size_kilobytes: int
    :param ipsec_encryption: Required. The IPSec encryption algorithm (IKE phase 1). Possible
     values include: "None", "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES128", "GCMAES192",
     "GCMAES256".
    :type ipsec_encryption: str or
     ~virtual_wan_as_aservice_management_client.models.IpsecEncryption
    :param ipsec_integrity: Required. The IPSec integrity algorithm (IKE phase 1). Possible values
     include: "MD5", "SHA1", "SHA256", "GCMAES128", "GCMAES192", "GCMAES256".
    :type ipsec_integrity: str or ~virtual_wan_as_aservice_management_client.models.IpsecIntegrity
    :param ike_encryption: Required. The IKE encryption algorithm (IKE phase 2). Possible values
     include: "DES", "DES3", "AES128", "AES192", "AES256", "GCMAES256", "GCMAES128".
    :type ike_encryption: str or ~virtual_wan_as_aservice_management_client.models.IkeEncryption
    :param ike_integrity: Required. The IKE integrity algorithm (IKE phase 2). Possible values
     include: "MD5", "SHA1", "SHA256", "SHA384", "GCMAES256", "GCMAES128".
    :type ike_integrity: str or ~virtual_wan_as_aservice_management_client.models.IkeIntegrity
    :param dh_group: Required. The DH Group used in IKE Phase 1 for initial SA. Possible values
     include: "None", "DHGroup1", "DHGroup2", "DHGroup14", "DHGroup2048", "ECP256", "ECP384",
     "DHGroup24".
    :type dh_group: str or ~virtual_wan_as_aservice_management_client.models.DhGroup
    :param pfs_group: Required. The Pfs Group used in IKE Phase 2 for new child SA. Possible values
     include: "None", "PFS1", "PFS2", "PFS2048", "ECP256", "ECP384", "PFS24", "PFS14", "PFSMM".
    :type pfs_group: str or ~virtual_wan_as_aservice_management_client.models.PfsGroup
    """

    _validation = {
        'sa_life_time_seconds': {'required': True},
        'sa_data_size_kilobytes': {'required': True},
        'ipsec_encryption': {'required': True},
        'ipsec_integrity': {'required': True},
        'ike_encryption': {'required': True},
        'ike_integrity': {'required': True},
        'dh_group': {'required': True},
        'pfs_group': {'required': True},
    }

    _attribute_map = {
        'sa_life_time_seconds': {'key': 'saLifeTimeSeconds', 'type': 'int'},
        'sa_data_size_kilobytes': {'key': 'saDataSizeKilobytes', 'type': 'int'},
        'ipsec_encryption': {'key': 'ipsecEncryption', 'type': 'str'},
        'ipsec_integrity': {'key': 'ipsecIntegrity', 'type': 'str'},
        'ike_encryption': {'key': 'ikeEncryption', 'type': 'str'},
        'ike_integrity': {'key': 'ikeIntegrity', 'type': 'str'},
        'dh_group': {'key': 'dhGroup', 'type': 'str'},
        'pfs_group': {'key': 'pfsGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IpsecPolicy, self).__init__(**kwargs)
        self.sa_life_time_seconds = kwargs['sa_life_time_seconds']
        self.sa_data_size_kilobytes = kwargs['sa_data_size_kilobytes']
        self.ipsec_encryption = kwargs['ipsec_encryption']
        self.ipsec_integrity = kwargs['ipsec_integrity']
        self.ike_encryption = kwargs['ike_encryption']
        self.ike_integrity = kwargs['ike_integrity']
        self.dh_group = kwargs['dh_group']
        self.pfs_group = kwargs['pfs_group']


class IpTag(msrest.serialization.Model):
    """Contains the IpTag associated with the object.

    :param ip_tag_type: The IP tag type. Example: FirstPartyUsage.
    :type ip_tag_type: str
    :param tag: The value of the IP tag associated with the public IP. Example: SQL.
    :type tag: str
    """

    _attribute_map = {
        'ip_tag_type': {'key': 'ipTagType', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IpTag, self).__init__(**kwargs)
        self.ip_tag_type = kwargs.get('ip_tag_type', None)
        self.tag = kwargs.get('tag', None)


class ListHubRouteTablesResult(msrest.serialization.Model):
    """List of RouteTables and a URL nextLink to get the next set of results.

    :param value: List of RouteTables.
    :type value: list[~virtual_wan_as_aservice_management_client.models.HubRouteTable]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubRouteTable]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListHubRouteTablesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListHubVirtualNetworkConnectionsResult(msrest.serialization.Model):
    """List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.

    :param value: List of HubVirtualNetworkConnections.
    :type value:
     list[~virtual_wan_as_aservice_management_client.models.HubVirtualNetworkConnection]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubVirtualNetworkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListHubVirtualNetworkConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListP2SVpnGatewaysResult(msrest.serialization.Model):
    """Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.

    :param value: List of P2SVpnGateways.
    :type value: list[~virtual_wan_as_aservice_management_client.models.P2SVpnGateway]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[P2SVpnGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListP2SVpnGatewaysResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubBgpConnectionResults(msrest.serialization.Model):
    """VirtualHubBgpConnections list.

    :param value: The list of VirtualHubBgpConnections.
    :type value: list[~virtual_wan_as_aservice_management_client.models.BgpConnection]
    :param next_link: URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BgpConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVirtualHubBgpConnectionResults, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubIpConfigurationResults(msrest.serialization.Model):
    """VirtualHubIpConfigurations list.

    :param value: The list of VirtualHubIpConfigurations.
    :type value: list[~virtual_wan_as_aservice_management_client.models.HubIpConfiguration]
    :param next_link: URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HubIpConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVirtualHubIpConfigurationResults, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubRouteTableV2SResult(msrest.serialization.Model):
    """List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.

    :param value: List of VirtualHubRouteTableV2s.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VirtualHubRouteTableV2]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHubRouteTableV2]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVirtualHubRouteTableV2SResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualHubsResult(msrest.serialization.Model):
    """Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.

    :param value: List of VirtualHubs.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VirtualHub]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHub]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVirtualHubsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVirtualWANsResult(msrest.serialization.Model):
    """Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.

    :param value: List of VirtualWANs.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VirtualWAN]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualWAN]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVirtualWANsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnConnectionsResult(msrest.serialization.Model):
    """Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.

    :param value: List of Vpn Connections.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnConnection]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnGatewayNatRulesResult(msrest.serialization.Model):
    """Result of the request to list all nat rules to a virtual wan vpn gateway. It contains a list of Nat rules and a URL nextLink to get the next set of results.

    :param value: List of Nat Rules.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnGatewayNatRule]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnGatewayNatRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnGatewayNatRulesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnGatewaysResult(msrest.serialization.Model):
    """Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.

    :param value: List of VpnGateways.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnGateway]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnGateway]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnGatewaysResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnServerConfigurationsResult(msrest.serialization.Model):
    """Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.

    :param value: List of VpnServerConfigurations.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnServerConfiguration]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnServerConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnServerConfigurationsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSiteLinkConnectionsResult(msrest.serialization.Model):
    """Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next set of results.

    :param value: List of VpnSiteLinkConnections.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnSiteLinkConnection]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSiteLinkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnSiteLinkConnectionsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSiteLinksResult(msrest.serialization.Model):
    """Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.

    :param value: List of VpnSitesLinks.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnSiteLink]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSiteLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnSiteLinksResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ListVpnSitesResult(msrest.serialization.Model):
    """Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.

    :param value: List of VpnSites.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VpnSite]
    :param next_link: URL to get the next set of operation list results if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VpnSite]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListVpnSitesResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class LoadBalancerBackendAddress(msrest.serialization.Model):
    """Load balancer backend addresses.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param name: Name of the backend address.
    :type name: str
    :param virtual_network: Reference to an existing virtual network.
    :type virtual_network: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param ip_address: IP Address belonging to the referenced virtual network.
    :type ip_address: str
    :ivar network_interface_ip_configuration: Reference to IP address defined in network
     interfaces.
    :vartype network_interface_ip_configuration:
     ~virtual_wan_as_aservice_management_client.models.SubResource
    :param load_balancer_frontend_ip_configuration: Reference to the frontend ip address
     configuration defined in regional loadbalancer.
    :type load_balancer_frontend_ip_configuration:
     ~virtual_wan_as_aservice_management_client.models.SubResource
    """

    _validation = {
        'network_interface_ip_configuration': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'virtual_network': {'key': 'properties.virtualNetwork', 'type': 'SubResource'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'network_interface_ip_configuration': {'key': 'properties.networkInterfaceIPConfiguration', 'type': 'SubResource'},
        'load_balancer_frontend_ip_configuration': {'key': 'properties.loadBalancerFrontendIPConfiguration', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LoadBalancerBackendAddress, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.virtual_network = kwargs.get('virtual_network', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.network_interface_ip_configuration = None
        self.load_balancer_frontend_ip_configuration = kwargs.get('load_balancer_frontend_ip_configuration', None)


class NetworkInterface(Resource):
    """A network interface in a resource group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param extended_location: The extended location of the network interface.
    :type extended_location: ~virtual_wan_as_aservice_management_client.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar virtual_machine: The reference to a virtual machine.
    :vartype virtual_machine: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param network_security_group: The reference to the NetworkSecurityGroup resource.
    :type network_security_group:
     ~virtual_wan_as_aservice_management_client.models.NetworkSecurityGroup
    :ivar private_endpoint: A reference to the private endpoint to which the network interface is
     linked.
    :vartype private_endpoint: ~virtual_wan_as_aservice_management_client.models.PrivateEndpoint
    :param ip_configurations: A list of IPConfigurations of the network interface.
    :type ip_configurations:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterfaceIPConfiguration]
    :ivar tap_configurations: A list of TapConfigurations of the network interface.
    :vartype tap_configurations:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterfaceTapConfiguration]
    :param dns_settings: The DNS settings in network interface.
    :type dns_settings:
     ~virtual_wan_as_aservice_management_client.models.NetworkInterfaceDnsSettings
    :ivar mac_address: The MAC address of the network interface.
    :vartype mac_address: str
    :ivar primary: Whether this is a primary network interface on a virtual machine.
    :vartype primary: bool
    :param enable_accelerated_networking: If the network interface is accelerated networking
     enabled.
    :type enable_accelerated_networking: bool
    :param enable_ip_forwarding: Indicates whether IP forwarding is enabled on this network
     interface.
    :type enable_ip_forwarding: bool
    :ivar hosted_workloads: A list of references to linked BareMetal resources.
    :vartype hosted_workloads: list[str]
    :ivar dscp_configuration: A reference to the dscp configuration to which the network interface
     is linked.
    :vartype dscp_configuration: ~virtual_wan_as_aservice_management_client.models.SubResource
    :ivar resource_guid: The resource GUID property of the network interface resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the network interface resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_machine': {'readonly': True},
        'private_endpoint': {'readonly': True},
        'tap_configurations': {'readonly': True},
        'mac_address': {'readonly': True},
        'primary': {'readonly': True},
        'hosted_workloads': {'readonly': True},
        'dscp_configuration': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_machine': {'key': 'properties.virtualMachine', 'type': 'SubResource'},
        'network_security_group': {'key': 'properties.networkSecurityGroup', 'type': 'NetworkSecurityGroup'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[NetworkInterfaceIPConfiguration]'},
        'tap_configurations': {'key': 'properties.tapConfigurations', 'type': '[NetworkInterfaceTapConfiguration]'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'NetworkInterfaceDnsSettings'},
        'mac_address': {'key': 'properties.macAddress', 'type': 'str'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'enable_accelerated_networking': {'key': 'properties.enableAcceleratedNetworking', 'type': 'bool'},
        'enable_ip_forwarding': {'key': 'properties.enableIPForwarding', 'type': 'bool'},
        'hosted_workloads': {'key': 'properties.hostedWorkloads', 'type': '[str]'},
        'dscp_configuration': {'key': 'properties.dscpConfiguration', 'type': 'SubResource'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkInterface, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.virtual_machine = None
        self.network_security_group = kwargs.get('network_security_group', None)
        self.private_endpoint = None
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.tap_configurations = None
        self.dns_settings = kwargs.get('dns_settings', None)
        self.mac_address = None
        self.primary = None
        self.enable_accelerated_networking = kwargs.get('enable_accelerated_networking', None)
        self.enable_ip_forwarding = kwargs.get('enable_ip_forwarding', None)
        self.hosted_workloads = None
        self.dscp_configuration = None
        self.resource_guid = None
        self.provisioning_state = None


class NetworkInterfaceDnsSettings(msrest.serialization.Model):
    """DNS settings of a network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param dns_servers: List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure
     provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be
     the only value in dnsServers collection.
    :type dns_servers: list[str]
    :ivar applied_dns_servers: If the VM that uses this NIC is part of an Availability Set, then
     this list will have the union of all DNS servers from all NICs that are part of the
     Availability Set. This property is what is configured on each of those VMs.
    :vartype applied_dns_servers: list[str]
    :param internal_dns_name_label: Relative DNS name for this NIC used for internal communications
     between VMs in the same virtual network.
    :type internal_dns_name_label: str
    :ivar internal_fqdn: Fully qualified DNS name supporting internal communications between VMs in
     the same virtual network.
    :vartype internal_fqdn: str
    :ivar internal_domain_name_suffix: Even if internalDnsNameLabel is not specified, a DNS entry
     is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the
     VM name with the value of internalDomainNameSuffix.
    :vartype internal_domain_name_suffix: str
    """

    _validation = {
        'applied_dns_servers': {'readonly': True},
        'internal_fqdn': {'readonly': True},
        'internal_domain_name_suffix': {'readonly': True},
    }

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'applied_dns_servers': {'key': 'appliedDnsServers', 'type': '[str]'},
        'internal_dns_name_label': {'key': 'internalDnsNameLabel', 'type': 'str'},
        'internal_fqdn': {'key': 'internalFqdn', 'type': 'str'},
        'internal_domain_name_suffix': {'key': 'internalDomainNameSuffix', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkInterfaceDnsSettings, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)
        self.applied_dns_servers = None
        self.internal_dns_name_label = kwargs.get('internal_dns_name_label', None)
        self.internal_fqdn = None
        self.internal_domain_name_suffix = None


class NetworkInterfaceIPConfiguration(SubResource):
    """IPConfiguration in a network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param virtual_network_taps: The reference to Virtual Network Taps.
    :type virtual_network_taps:
     list[~virtual_wan_as_aservice_management_client.models.VirtualNetworkTap]
    :param application_gateway_backend_address_pools: The reference to
     ApplicationGatewayBackendAddressPool resource.
    :type application_gateway_backend_address_pools:
     list[~virtual_wan_as_aservice_management_client.models.ApplicationGatewayBackendAddressPool]
    :param load_balancer_backend_address_pools: The reference to LoadBalancerBackendAddressPool
     resource.
    :type load_balancer_backend_address_pools:
     list[~virtual_wan_as_aservice_management_client.models.BackendAddressPool]
    :param load_balancer_inbound_nat_rules: A list of references of LoadBalancerInboundNatRules.
    :type load_balancer_inbound_nat_rules:
     list[~virtual_wan_as_aservice_management_client.models.InboundNatRule]
    :param private_ip_address: Private IP address of the IP configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: The private IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :type private_ip_allocation_method: str or
     ~virtual_wan_as_aservice_management_client.models.IPAllocationMethod
    :param private_ip_address_version: Whether the specific IP configuration is IPv4 or IPv6.
     Default is IPv4. Possible values include: "IPv4", "IPv6".
    :type private_ip_address_version: str or
     ~virtual_wan_as_aservice_management_client.models.IPVersion
    :param subnet: Subnet bound to the IP configuration.
    :type subnet: ~virtual_wan_as_aservice_management_client.models.Subnet
    :param primary: Whether this is a primary customer address on the network interface.
    :type primary: bool
    :param public_ip_address: Public IP address bound to the IP configuration.
    :type public_ip_address: ~virtual_wan_as_aservice_management_client.models.PublicIPAddress
    :param application_security_groups: Application security groups in which the IP configuration
     is included.
    :type application_security_groups:
     list[~virtual_wan_as_aservice_management_client.models.ApplicationSecurityGroup]
    :ivar provisioning_state: The provisioning state of the network interface IP configuration.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :ivar private_link_connection_properties: PrivateLinkConnection properties for the network
     interface.
    :vartype private_link_connection_properties:
     ~virtual_wan_as_aservice_management_client.models.NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'private_link_connection_properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_network_taps': {'key': 'properties.virtualNetworkTaps', 'type': '[VirtualNetworkTap]'},
        'application_gateway_backend_address_pools': {'key': 'properties.applicationGatewayBackendAddressPools', 'type': '[ApplicationGatewayBackendAddressPool]'},
        'load_balancer_backend_address_pools': {'key': 'properties.loadBalancerBackendAddressPools', 'type': '[BackendAddressPool]'},
        'load_balancer_inbound_nat_rules': {'key': 'properties.loadBalancerInboundNatRules', 'type': '[InboundNatRule]'},
        'private_ip_address': {'key': 'properties.privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'properties.privateIPAllocationMethod', 'type': 'str'},
        'private_ip_address_version': {'key': 'properties.privateIPAddressVersion', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'primary': {'key': 'properties.primary', 'type': 'bool'},
        'public_ip_address': {'key': 'properties.publicIPAddress', 'type': 'PublicIPAddress'},
        'application_security_groups': {'key': 'properties.applicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_connection_properties': {'key': 'properties.privateLinkConnectionProperties', 'type': 'NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkInterfaceIPConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.virtual_network_taps = kwargs.get('virtual_network_taps', None)
        self.application_gateway_backend_address_pools = kwargs.get('application_gateway_backend_address_pools', None)
        self.load_balancer_backend_address_pools = kwargs.get('load_balancer_backend_address_pools', None)
        self.load_balancer_inbound_nat_rules = kwargs.get('load_balancer_inbound_nat_rules', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.private_ip_address_version = kwargs.get('private_ip_address_version', None)
        self.subnet = kwargs.get('subnet', None)
        self.primary = kwargs.get('primary', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.application_security_groups = kwargs.get('application_security_groups', None)
        self.provisioning_state = None
        self.private_link_connection_properties = None


class NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties(msrest.serialization.Model):
    """PrivateLinkConnection properties for the network interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar group_id: The group ID for current private link connection.
    :vartype group_id: str
    :ivar required_member_name: The required member name for current private link connection.
    :vartype required_member_name: str
    :ivar fqdns: List of FQDNs for current private link connection.
    :vartype fqdns: list[str]
    """

    _validation = {
        'group_id': {'readonly': True},
        'required_member_name': {'readonly': True},
        'fqdns': {'readonly': True},
    }

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'required_member_name': {'key': 'requiredMemberName', 'type': 'str'},
        'fqdns': {'key': 'fqdns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties, self).__init__(**kwargs)
        self.group_id = None
        self.required_member_name = None
        self.fqdns = None


class NetworkInterfaceTapConfiguration(SubResource):
    """Tap configuration in a Network Interface.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Sub Resource type.
    :vartype type: str
    :param virtual_network_tap: The reference to the Virtual Network Tap resource.
    :type virtual_network_tap: ~virtual_wan_as_aservice_management_client.models.VirtualNetworkTap
    :ivar provisioning_state: The provisioning state of the network interface tap configuration
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'virtual_network_tap': {'key': 'properties.virtualNetworkTap', 'type': 'VirtualNetworkTap'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkInterfaceTapConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.virtual_network_tap = kwargs.get('virtual_network_tap', None)
        self.provisioning_state = None


class NetworkSecurityGroup(Resource):
    """NetworkSecurityGroup resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param security_rules: A collection of security rules of the network security group.
    :type security_rules: list[~virtual_wan_as_aservice_management_client.models.SecurityRule]
    :ivar default_security_rules: The default security rules of network security group.
    :vartype default_security_rules:
     list[~virtual_wan_as_aservice_management_client.models.SecurityRule]
    :ivar network_interfaces: A collection of references to network interfaces.
    :vartype network_interfaces:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterface]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~virtual_wan_as_aservice_management_client.models.Subnet]
    :ivar flow_logs: A collection of references to flow log resources.
    :vartype flow_logs: list[~virtual_wan_as_aservice_management_client.models.FlowLog]
    :ivar resource_guid: The resource GUID property of the network security group resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the network security group resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'default_security_rules': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'subnets': {'readonly': True},
        'flow_logs': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'security_rules': {'key': 'properties.securityRules', 'type': '[SecurityRule]'},
        'default_security_rules': {'key': 'properties.defaultSecurityRules', 'type': '[SecurityRule]'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'flow_logs': {'key': 'properties.flowLogs', 'type': '[FlowLog]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkSecurityGroup, self).__init__(**kwargs)
        self.etag = None
        self.security_rules = kwargs.get('security_rules', None)
        self.default_security_rules = None
        self.network_interfaces = None
        self.subnets = None
        self.flow_logs = None
        self.resource_guid = None
        self.provisioning_state = None


class O365BreakOutCategoryPolicies(msrest.serialization.Model):
    """Office365 breakout categories.

    :param allow: Flag to control allow category.
    :type allow: bool
    :param optimize: Flag to control optimize category.
    :type optimize: bool
    :param default: Flag to control default category.
    :type default: bool
    """

    _attribute_map = {
        'allow': {'key': 'allow', 'type': 'bool'},
        'optimize': {'key': 'optimize', 'type': 'bool'},
        'default': {'key': 'default', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(O365BreakOutCategoryPolicies, self).__init__(**kwargs)
        self.allow = kwargs.get('allow', None)
        self.optimize = kwargs.get('optimize', None)
        self.default = kwargs.get('default', None)


class O365PolicyProperties(msrest.serialization.Model):
    """The Office365 breakout policy.

    :param break_out_categories: Office365 breakout categories.
    :type break_out_categories:
     ~virtual_wan_as_aservice_management_client.models.O365BreakOutCategoryPolicies
    """

    _attribute_map = {
        'break_out_categories': {'key': 'breakOutCategories', 'type': 'O365BreakOutCategoryPolicies'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(O365PolicyProperties, self).__init__(**kwargs)
        self.break_out_categories = kwargs.get('break_out_categories', None)


class P2SConnectionConfiguration(SubResource):
    """P2SConnectionConfiguration Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param vpn_client_address_pool: The reference to the address space resource which represents
     Address space for P2S VpnClient.
    :type vpn_client_address_pool: ~virtual_wan_as_aservice_management_client.models.AddressSpace
    :param routing_configuration: The Routing Configuration indicating the associated and
     propagated route tables on this connection.
    :type routing_configuration:
     ~virtual_wan_as_aservice_management_client.models.RoutingConfiguration
    :param enable_internet_security: Flag indicating whether the enable internet security flag is
     turned on for the P2S Connections or not.
    :type enable_internet_security: bool
    :ivar provisioning_state: The provisioning state of the P2SConnectionConfiguration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'vpn_client_address_pool': {'key': 'properties.vpnClientAddressPool', 'type': 'AddressSpace'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(P2SConnectionConfiguration, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.vpn_client_address_pool = kwargs.get('vpn_client_address_pool', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.provisioning_state = None


class P2SVpnConnectionHealth(msrest.serialization.Model):
    """P2S Vpn connection detailed health written to sas url.

    :param sas_url: Returned sas url of the blob to which the p2s vpn connection detailed health
     will be written.
    :type sas_url: str
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(P2SVpnConnectionHealth, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)


class P2SVpnConnectionHealthRequest(msrest.serialization.Model):
    """List of P2S Vpn connection health request.

    :param vpn_user_names_filter: The list of p2s vpn user names whose p2s vpn connection detailed
     health to retrieve for.
    :type vpn_user_names_filter: list[str]
    :param output_blob_sas_url: The sas-url to download the P2S Vpn connection health detail.
    :type output_blob_sas_url: str
    """

    _attribute_map = {
        'vpn_user_names_filter': {'key': 'vpnUserNamesFilter', 'type': '[str]'},
        'output_blob_sas_url': {'key': 'outputBlobSasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(P2SVpnConnectionHealthRequest, self).__init__(**kwargs)
        self.vpn_user_names_filter = kwargs.get('vpn_user_names_filter', None)
        self.output_blob_sas_url = kwargs.get('output_blob_sas_url', None)


class P2SVpnConnectionRequest(msrest.serialization.Model):
    """List of p2s vpn connections to be disconnected.

    :param vpn_connection_ids: List of p2s vpn connection Ids.
    :type vpn_connection_ids: list[str]
    """

    _attribute_map = {
        'vpn_connection_ids': {'key': 'vpnConnectionIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(P2SVpnConnectionRequest, self).__init__(**kwargs)
        self.vpn_connection_ids = kwargs.get('vpn_connection_ids', None)


class P2SVpnGateway(Resource):
    """P2SVpnGateway Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param virtual_hub: The VirtualHub to which the gateway belongs.
    :type virtual_hub: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param p2_s_connection_configurations: List of all p2s connection configurations of the
     gateway.
    :type p2_s_connection_configurations:
     list[~virtual_wan_as_aservice_management_client.models.P2SConnectionConfiguration]
    :ivar provisioning_state: The provisioning state of the P2S VPN gateway resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param vpn_gateway_scale_unit: The scale unit for this p2s vpn gateway.
    :type vpn_gateway_scale_unit: int
    :param vpn_server_configuration: The VpnServerConfiguration to which the p2sVpnGateway is
     attached to.
    :type vpn_server_configuration: ~virtual_wan_as_aservice_management_client.models.SubResource
    :ivar vpn_client_connection_health: All P2S VPN clients' connection health status.
    :vartype vpn_client_connection_health:
     ~virtual_wan_as_aservice_management_client.models.VpnClientConnectionHealth
    :param custom_dns_servers: List of all customer specified DNS servers IP addresses.
    :type custom_dns_servers: list[str]
    :param is_routing_preference_internet: Enable Routing Preference property for the Public IP
     Interface of the P2SVpnGateway.
    :type is_routing_preference_internet: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'vpn_client_connection_health': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'p2_s_connection_configurations': {'key': 'properties.p2SConnectionConfigurations', 'type': '[P2SConnectionConfiguration]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'vpn_gateway_scale_unit': {'key': 'properties.vpnGatewayScaleUnit', 'type': 'int'},
        'vpn_server_configuration': {'key': 'properties.vpnServerConfiguration', 'type': 'SubResource'},
        'vpn_client_connection_health': {'key': 'properties.vpnClientConnectionHealth', 'type': 'VpnClientConnectionHealth'},
        'custom_dns_servers': {'key': 'properties.customDnsServers', 'type': '[str]'},
        'is_routing_preference_internet': {'key': 'properties.isRoutingPreferenceInternet', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(P2SVpnGateway, self).__init__(**kwargs)
        self.etag = None
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.p2_s_connection_configurations = kwargs.get('p2_s_connection_configurations', None)
        self.provisioning_state = None
        self.vpn_gateway_scale_unit = kwargs.get('vpn_gateway_scale_unit', None)
        self.vpn_server_configuration = kwargs.get('vpn_server_configuration', None)
        self.vpn_client_connection_health = None
        self.custom_dns_servers = kwargs.get('custom_dns_servers', None)
        self.is_routing_preference_internet = kwargs.get('is_routing_preference_internet', None)


class P2SVpnProfileParameters(msrest.serialization.Model):
    """Vpn Client Parameters for package generation.

    :param authentication_method: VPN client authentication method. Possible values include:
     "EAPTLS", "EAPMSCHAPv2".
    :type authentication_method: str or
     ~virtual_wan_as_aservice_management_client.models.AuthenticationMethod
    """

    _attribute_map = {
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(P2SVpnProfileParameters, self).__init__(**kwargs)
        self.authentication_method = kwargs.get('authentication_method', None)


class PeerRoute(msrest.serialization.Model):
    """Peer routing details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar local_address: The peer's local address.
    :vartype local_address: str
    :ivar network: The route's network prefix.
    :vartype network: str
    :ivar next_hop: The route's next hop.
    :vartype next_hop: str
    :ivar source_peer: The peer this route was learned from.
    :vartype source_peer: str
    :ivar origin: The source this route was learned from.
    :vartype origin: str
    :ivar as_path: The route's AS path sequence.
    :vartype as_path: str
    :ivar weight: The route's weight.
    :vartype weight: int
    """

    _validation = {
        'local_address': {'readonly': True},
        'network': {'readonly': True},
        'next_hop': {'readonly': True},
        'source_peer': {'readonly': True},
        'origin': {'readonly': True},
        'as_path': {'readonly': True},
        'weight': {'readonly': True},
    }

    _attribute_map = {
        'local_address': {'key': 'localAddress', 'type': 'str'},
        'network': {'key': 'network', 'type': 'str'},
        'next_hop': {'key': 'nextHop', 'type': 'str'},
        'source_peer': {'key': 'sourcePeer', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'as_path': {'key': 'asPath', 'type': 'str'},
        'weight': {'key': 'weight', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PeerRoute, self).__init__(**kwargs)
        self.local_address = None
        self.network = None
        self.next_hop = None
        self.source_peer = None
        self.origin = None
        self.as_path = None
        self.weight = None


class PeerRouteList(msrest.serialization.Model):
    """List of virtual router peer routes.

    :param value: List of peer routes.
    :type value: list[~virtual_wan_as_aservice_management_client.models.PeerRoute]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PeerRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PeerRouteList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PrivateEndpoint(Resource):
    """Private endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param extended_location: The extended location of the load balancer.
    :type extended_location: ~virtual_wan_as_aservice_management_client.models.ExtendedLocation
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param subnet: The ID of the subnet from which the private IP will be allocated.
    :type subnet: ~virtual_wan_as_aservice_management_client.models.Subnet
    :ivar network_interfaces: An array of references to the network interfaces created for this
     private endpoint.
    :vartype network_interfaces:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterface]
    :ivar provisioning_state: The provisioning state of the private endpoint resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param private_link_service_connections: A grouping of information about the connection to the
     remote resource.
    :type private_link_service_connections:
     list[~virtual_wan_as_aservice_management_client.models.PrivateLinkServiceConnection]
    :param manual_private_link_service_connections: A grouping of information about the connection
     to the remote resource. Used when the network admin does not have access to approve connections
     to the remote resource.
    :type manual_private_link_service_connections:
     list[~virtual_wan_as_aservice_management_client.models.PrivateLinkServiceConnection]
    :param custom_dns_configs: An array of custom dns configurations.
    :type custom_dns_configs:
     list[~virtual_wan_as_aservice_management_client.models.CustomDnsConfigPropertiesFormat]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'etag': {'key': 'etag', 'type': 'str'},
        'subnet': {'key': 'properties.subnet', 'type': 'Subnet'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_service_connections': {'key': 'properties.privateLinkServiceConnections', 'type': '[PrivateLinkServiceConnection]'},
        'manual_private_link_service_connections': {'key': 'properties.manualPrivateLinkServiceConnections', 'type': '[PrivateLinkServiceConnection]'},
        'custom_dns_configs': {'key': 'properties.customDnsConfigs', 'type': '[CustomDnsConfigPropertiesFormat]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.etag = None
        self.subnet = kwargs.get('subnet', None)
        self.network_interfaces = None
        self.provisioning_state = None
        self.private_link_service_connections = kwargs.get('private_link_service_connections', None)
        self.manual_private_link_service_connections = kwargs.get('manual_private_link_service_connections', None)
        self.custom_dns_configs = kwargs.get('custom_dns_configs', None)


class PrivateLinkServiceConnection(SubResource):
    """PrivateLinkServiceConnection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar provisioning_state: The provisioning state of the private link service connection
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param private_link_service_id: The resource id of private link service.
    :type private_link_service_id: str
    :param group_ids: The ID(s) of the group(s) obtained from the remote resource that this private
     endpoint should connect to.
    :type group_ids: list[str]
    :param request_message: A message passed to the owner of the remote resource with this
     connection request. Restricted to 140 chars.
    :type request_message: str
    :param private_link_service_connection_state: A collection of read-only information about the
     state of the connection to the remote resource.
    :type private_link_service_connection_state:
     ~virtual_wan_as_aservice_management_client.models.PrivateLinkServiceConnectionState
    """

    _validation = {
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_service_id': {'key': 'properties.privateLinkServiceId', 'type': 'str'},
        'group_ids': {'key': 'properties.groupIds', 'type': '[str]'},
        'request_message': {'key': 'properties.requestMessage', 'type': 'str'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateLinkServiceConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = None
        self.etag = None
        self.provisioning_state = None
        self.private_link_service_id = kwargs.get('private_link_service_id', None)
        self.group_ids = kwargs.get('group_ids', None)
        self.request_message = kwargs.get('request_message', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)


class PrivateLinkServiceConnectionState(msrest.serialization.Model):
    """A collection of information about the state of the connection between service consumer and provider.

    :param status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service.
    :type status: str
    :param description: The reason for approval/rejection of the connection.
    :type description: str
    :param actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :type actions_required: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.description = kwargs.get('description', None)
        self.actions_required = kwargs.get('actions_required', None)


class PropagatedRouteTable(msrest.serialization.Model):
    """The list of RouteTables to advertise the routes to.

    :param labels: The list of labels.
    :type labels: list[str]
    :param ids: The list of resource ids of all the RouteTables.
    :type ids: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    """

    _attribute_map = {
        'labels': {'key': 'labels', 'type': '[str]'},
        'ids': {'key': 'ids', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PropagatedRouteTable, self).__init__(**kwargs)
        self.labels = kwargs.get('labels', None)
        self.ids = kwargs.get('ids', None)


class PublicIPAddress(Resource):
    """Public IP address resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param extended_location: The extended location of the public ip address.
    :type extended_location: ~virtual_wan_as_aservice_management_client.models.ExtendedLocation
    :param sku: The public IP address SKU.
    :type sku: ~virtual_wan_as_aservice_management_client.models.PublicIPAddressSku
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param zones: A list of availability zones denoting the IP allocated for the resource needs to
     come from.
    :type zones: list[str]
    :param public_ip_allocation_method: The public IP address allocation method. Possible values
     include: "Static", "Dynamic".
    :type public_ip_allocation_method: str or
     ~virtual_wan_as_aservice_management_client.models.IPAllocationMethod
    :param public_ip_address_version: The public IP address version. Possible values include:
     "IPv4", "IPv6".
    :type public_ip_address_version: str or
     ~virtual_wan_as_aservice_management_client.models.IPVersion
    :ivar ip_configuration: The IP configuration associated with the public IP address.
    :vartype ip_configuration: ~virtual_wan_as_aservice_management_client.models.IPConfiguration
    :param dns_settings: The FQDN of the DNS record associated with the public IP address.
    :type dns_settings:
     ~virtual_wan_as_aservice_management_client.models.PublicIPAddressDnsSettings
    :param ddos_settings: The DDoS protection custom policy associated with the public IP address.
    :type ddos_settings: ~virtual_wan_as_aservice_management_client.models.DdosSettings
    :param ip_tags: The list of tags associated with the public IP address.
    :type ip_tags: list[~virtual_wan_as_aservice_management_client.models.IpTag]
    :param ip_address: The IP address associated with the public IP address resource.
    :type ip_address: str
    :param public_ip_prefix: The Public IP Prefix this Public IP Address should be allocated from.
    :type public_ip_prefix: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param idle_timeout_in_minutes: The idle timeout of the public IP address.
    :type idle_timeout_in_minutes: int
    :ivar resource_guid: The resource GUID property of the public IP address resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the public IP address resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'ip_configuration': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'sku': {'key': 'sku', 'type': 'PublicIPAddressSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'public_ip_allocation_method': {'key': 'properties.publicIPAllocationMethod', 'type': 'str'},
        'public_ip_address_version': {'key': 'properties.publicIPAddressVersion', 'type': 'str'},
        'ip_configuration': {'key': 'properties.ipConfiguration', 'type': 'IPConfiguration'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'PublicIPAddressDnsSettings'},
        'ddos_settings': {'key': 'properties.ddosSettings', 'type': 'DdosSettings'},
        'ip_tags': {'key': 'properties.ipTags', 'type': '[IpTag]'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'public_ip_prefix': {'key': 'properties.publicIPPrefix', 'type': 'SubResource'},
        'idle_timeout_in_minutes': {'key': 'properties.idleTimeoutInMinutes', 'type': 'int'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PublicIPAddress, self).__init__(**kwargs)
        self.extended_location = kwargs.get('extended_location', None)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.zones = kwargs.get('zones', None)
        self.public_ip_allocation_method = kwargs.get('public_ip_allocation_method', None)
        self.public_ip_address_version = kwargs.get('public_ip_address_version', None)
        self.ip_configuration = None
        self.dns_settings = kwargs.get('dns_settings', None)
        self.ddos_settings = kwargs.get('ddos_settings', None)
        self.ip_tags = kwargs.get('ip_tags', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.public_ip_prefix = kwargs.get('public_ip_prefix', None)
        self.idle_timeout_in_minutes = kwargs.get('idle_timeout_in_minutes', None)
        self.resource_guid = None
        self.provisioning_state = None


class PublicIPAddressDnsSettings(msrest.serialization.Model):
    """Contains FQDN of the DNS record associated with the public IP address.

    :param domain_name_label: The domain name label. The concatenation of the domain name label and
     the regionalized DNS zone make up the fully qualified domain name associated with the public IP
     address. If a domain name label is specified, an A DNS record is created for the public IP in
     the Microsoft Azure DNS system.
    :type domain_name_label: str
    :param fqdn: The Fully Qualified Domain Name of the A DNS record associated with the public IP.
     This is the concatenation of the domainNameLabel and the regionalized DNS zone.
    :type fqdn: str
    :param reverse_fqdn: The reverse FQDN. A user-visible, fully qualified domain name that
     resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is
     created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
    :type reverse_fqdn: str
    """

    _attribute_map = {
        'domain_name_label': {'key': 'domainNameLabel', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'reverse_fqdn': {'key': 'reverseFqdn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PublicIPAddressDnsSettings, self).__init__(**kwargs)
        self.domain_name_label = kwargs.get('domain_name_label', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.reverse_fqdn = kwargs.get('reverse_fqdn', None)


class PublicIPAddressSku(msrest.serialization.Model):
    """SKU of a public IP address.

    :param name: Name of a public IP address SKU. Possible values include: "Basic", "Standard".
    :type name: str or ~virtual_wan_as_aservice_management_client.models.PublicIPAddressSkuName
    :param tier: Tier of a public IP address SKU. Possible values include: "Regional", "Global".
    :type tier: str or ~virtual_wan_as_aservice_management_client.models.PublicIPAddressSkuTier
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PublicIPAddressSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)


class RadiusServer(msrest.serialization.Model):
    """Radius Server Settings.

    All required parameters must be populated in order to send to Azure.

    :param radius_server_address: Required. The address of this radius server.
    :type radius_server_address: str
    :param radius_server_score: The initial score assigned to this radius server.
    :type radius_server_score: long
    :param radius_server_secret: The secret used for this radius server.
    :type radius_server_secret: str
    """

    _validation = {
        'radius_server_address': {'required': True},
    }

    _attribute_map = {
        'radius_server_address': {'key': 'radiusServerAddress', 'type': 'str'},
        'radius_server_score': {'key': 'radiusServerScore', 'type': 'long'},
        'radius_server_secret': {'key': 'radiusServerSecret', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RadiusServer, self).__init__(**kwargs)
        self.radius_server_address = kwargs['radius_server_address']
        self.radius_server_score = kwargs.get('radius_server_score', None)
        self.radius_server_secret = kwargs.get('radius_server_secret', None)


class ResourceNavigationLink(SubResource):
    """ResourceNavigationLink resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :param linked_resource_type: Resource type of the linked resource.
    :type linked_resource_type: str
    :param link: Link to the external resource.
    :type link: str
    :ivar provisioning_state: The provisioning state of the resource navigation link resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'linked_resource_type': {'key': 'properties.linkedResourceType', 'type': 'str'},
        'link': {'key': 'properties.link', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceNavigationLink, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.linked_resource_type = kwargs.get('linked_resource_type', None)
        self.link = kwargs.get('link', None)
        self.provisioning_state = None


class RetentionPolicyParameters(msrest.serialization.Model):
    """Parameters that define the retention policy for flow log.

    :param days: Number of days to retain flow log records.
    :type days: int
    :param enabled: Flag to enable/disable retention.
    :type enabled: bool
    """

    _attribute_map = {
        'days': {'key': 'days', 'type': 'int'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RetentionPolicyParameters, self).__init__(**kwargs)
        self.days = kwargs.get('days', 0)
        self.enabled = kwargs.get('enabled', False)


class Route(SubResource):
    """Route resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param type: The type of the resource.
    :type type: str
    :param address_prefix: The destination CIDR to which the route applies.
    :type address_prefix: str
    :param next_hop_type: The type of Azure hop the packet should be sent to. Possible values
     include: "VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None".
    :type next_hop_type: str or ~virtual_wan_as_aservice_management_client.models.RouteNextHopType
    :param next_hop_ip_address: The IP address packets should be forwarded to. Next hop values are
     only allowed in routes where the next hop type is VirtualAppliance.
    :type next_hop_ip_address: str
    :ivar provisioning_state: The provisioning state of the route resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param has_bgp_override: A value indicating whether this route overrides overlapping BGP routes
     regardless of LPM.
    :type has_bgp_override: bool
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'next_hop_type': {'key': 'properties.nextHopType', 'type': 'str'},
        'next_hop_ip_address': {'key': 'properties.nextHopIpAddress', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'has_bgp_override': {'key': 'properties.hasBgpOverride', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Route, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)
        self.provisioning_state = None
        self.has_bgp_override = kwargs.get('has_bgp_override', None)


class RouteTable(Resource):
    """Route table resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param routes: Collection of routes contained within a route table.
    :type routes: list[~virtual_wan_as_aservice_management_client.models.Route]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~virtual_wan_as_aservice_management_client.models.Subnet]
    :param disable_bgp_route_propagation: Whether to disable the routes learned by BGP on that
     route table. True means disable.
    :type disable_bgp_route_propagation: bool
    :ivar provisioning_state: The provisioning state of the route table resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :ivar resource_guid: The resource GUID property of the route table.
    :vartype resource_guid: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'subnets': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[Route]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'disable_bgp_route_propagation': {'key': 'properties.disableBgpRoutePropagation', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RouteTable, self).__init__(**kwargs)
        self.etag = None
        self.routes = kwargs.get('routes', None)
        self.subnets = None
        self.disable_bgp_route_propagation = kwargs.get('disable_bgp_route_propagation', None)
        self.provisioning_state = None
        self.resource_guid = None


class RoutingConfiguration(msrest.serialization.Model):
    """Routing Configuration indicating the associated and propagated route tables for this connection.

    :param associated_route_table: The resource id RouteTable associated with this
     RoutingConfiguration.
    :type associated_route_table: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param propagated_route_tables: The list of RouteTables to advertise the routes to.
    :type propagated_route_tables:
     ~virtual_wan_as_aservice_management_client.models.PropagatedRouteTable
    :param vnet_routes: List of routes that control routing from VirtualHub into a virtual network
     connection.
    :type vnet_routes: ~virtual_wan_as_aservice_management_client.models.VnetRoute
    """

    _attribute_map = {
        'associated_route_table': {'key': 'associatedRouteTable', 'type': 'SubResource'},
        'propagated_route_tables': {'key': 'propagatedRouteTables', 'type': 'PropagatedRouteTable'},
        'vnet_routes': {'key': 'vnetRoutes', 'type': 'VnetRoute'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RoutingConfiguration, self).__init__(**kwargs)
        self.associated_route_table = kwargs.get('associated_route_table', None)
        self.propagated_route_tables = kwargs.get('propagated_route_tables', None)
        self.vnet_routes = kwargs.get('vnet_routes', None)


class SecurityRule(SubResource):
    """Network security rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param type: The type of the resource.
    :type type: str
    :param description: A description for this rule. Restricted to 140 chars.
    :type description: str
    :param protocol: Network protocol this rule applies to. Possible values include: "Tcp", "Udp",
     "Icmp", "Esp", "*", "Ah".
    :type protocol: str or ~virtual_wan_as_aservice_management_client.models.SecurityRuleProtocol
    :param source_port_range: The source port or range. Integer or range between 0 and 65535.
     Asterisk '*' can also be used to match all ports.
    :type source_port_range: str
    :param destination_port_range: The destination port or range. Integer or range between 0 and
     65535. Asterisk '*' can also be used to match all ports.
    :type destination_port_range: str
    :param source_address_prefix: The CIDR or source IP range. Asterisk '*' can also be used to
     match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
     can also be used. If this is an ingress rule, specifies where network traffic originates from.
    :type source_address_prefix: str
    :param source_address_prefixes: The CIDR or source IP ranges.
    :type source_address_prefixes: list[str]
    :param source_application_security_groups: The application security group specified as source.
    :type source_application_security_groups:
     list[~virtual_wan_as_aservice_management_client.models.ApplicationSecurityGroup]
    :param destination_address_prefix: The destination address prefix. CIDR or destination IP
     range. Asterisk '*' can also be used to match all source IPs. Default tags such as
     'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
    :type destination_address_prefix: str
    :param destination_address_prefixes: The destination address prefixes. CIDR or destination IP
     ranges.
    :type destination_address_prefixes: list[str]
    :param destination_application_security_groups: The application security group specified as
     destination.
    :type destination_application_security_groups:
     list[~virtual_wan_as_aservice_management_client.models.ApplicationSecurityGroup]
    :param source_port_ranges: The source port ranges.
    :type source_port_ranges: list[str]
    :param destination_port_ranges: The destination port ranges.
    :type destination_port_ranges: list[str]
    :param access: The network traffic is allowed or denied. Possible values include: "Allow",
     "Deny".
    :type access: str or ~virtual_wan_as_aservice_management_client.models.SecurityRuleAccess
    :param priority: The priority of the rule. The value can be between 100 and 4096. The priority
     number must be unique for each rule in the collection. The lower the priority number, the
     higher the priority of the rule.
    :type priority: int
    :param direction: The direction of the rule. The direction specifies if rule will be evaluated
     on incoming or outgoing traffic. Possible values include: "Inbound", "Outbound".
    :type direction: str or ~virtual_wan_as_aservice_management_client.models.SecurityRuleDirection
    :ivar provisioning_state: The provisioning state of the security rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'source_port_range': {'key': 'properties.sourcePortRange', 'type': 'str'},
        'destination_port_range': {'key': 'properties.destinationPortRange', 'type': 'str'},
        'source_address_prefix': {'key': 'properties.sourceAddressPrefix', 'type': 'str'},
        'source_address_prefixes': {'key': 'properties.sourceAddressPrefixes', 'type': '[str]'},
        'source_application_security_groups': {'key': 'properties.sourceApplicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'destination_address_prefix': {'key': 'properties.destinationAddressPrefix', 'type': 'str'},
        'destination_address_prefixes': {'key': 'properties.destinationAddressPrefixes', 'type': '[str]'},
        'destination_application_security_groups': {'key': 'properties.destinationApplicationSecurityGroups', 'type': '[ApplicationSecurityGroup]'},
        'source_port_ranges': {'key': 'properties.sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'properties.destinationPortRanges', 'type': '[str]'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'direction': {'key': 'properties.direction', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SecurityRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = kwargs.get('type', None)
        self.description = kwargs.get('description', None)
        self.protocol = kwargs.get('protocol', None)
        self.source_port_range = kwargs.get('source_port_range', None)
        self.destination_port_range = kwargs.get('destination_port_range', None)
        self.source_address_prefix = kwargs.get('source_address_prefix', None)
        self.source_address_prefixes = kwargs.get('source_address_prefixes', None)
        self.source_application_security_groups = kwargs.get('source_application_security_groups', None)
        self.destination_address_prefix = kwargs.get('destination_address_prefix', None)
        self.destination_address_prefixes = kwargs.get('destination_address_prefixes', None)
        self.destination_application_security_groups = kwargs.get('destination_application_security_groups', None)
        self.source_port_ranges = kwargs.get('source_port_ranges', None)
        self.destination_port_ranges = kwargs.get('destination_port_ranges', None)
        self.access = kwargs.get('access', None)
        self.priority = kwargs.get('priority', None)
        self.direction = kwargs.get('direction', None)
        self.provisioning_state = None


class ServiceAssociationLink(SubResource):
    """ServiceAssociationLink resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: Name of the resource that is unique within a resource group. This name can be used
     to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :param linked_resource_type: Resource type of the linked resource.
    :type linked_resource_type: str
    :param link: Link to the external resource.
    :type link: str
    :ivar provisioning_state: The provisioning state of the service association link resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param allow_delete: If true, the resource can be deleted.
    :type allow_delete: bool
    :param locations: A list of locations.
    :type locations: list[str]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'linked_resource_type': {'key': 'properties.linkedResourceType', 'type': 'str'},
        'link': {'key': 'properties.link', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'allow_delete': {'key': 'properties.allowDelete', 'type': 'bool'},
        'locations': {'key': 'properties.locations', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceAssociationLink, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.linked_resource_type = kwargs.get('linked_resource_type', None)
        self.link = kwargs.get('link', None)
        self.provisioning_state = None
        self.allow_delete = kwargs.get('allow_delete', None)
        self.locations = kwargs.get('locations', None)


class ServiceEndpointPolicy(Resource):
    """Service End point policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param service_endpoint_policy_definitions: A collection of service endpoint policy definitions
     of the service endpoint policy.
    :type service_endpoint_policy_definitions:
     list[~virtual_wan_as_aservice_management_client.models.ServiceEndpointPolicyDefinition]
    :ivar subnets: A collection of references to subnets.
    :vartype subnets: list[~virtual_wan_as_aservice_management_client.models.Subnet]
    :ivar resource_guid: The resource GUID property of the service endpoint policy resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the service endpoint policy resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'subnets': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'service_endpoint_policy_definitions': {'key': 'properties.serviceEndpointPolicyDefinitions', 'type': '[ServiceEndpointPolicyDefinition]'},
        'subnets': {'key': 'properties.subnets', 'type': '[Subnet]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceEndpointPolicy, self).__init__(**kwargs)
        self.etag = None
        self.service_endpoint_policy_definitions = kwargs.get('service_endpoint_policy_definitions', None)
        self.subnets = None
        self.resource_guid = None
        self.provisioning_state = None


class ServiceEndpointPolicyDefinition(SubResource):
    """Service Endpoint policy definitions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param description: A description for this rule. Restricted to 140 chars.
    :type description: str
    :param service: Service endpoint name.
    :type service: str
    :param service_resources: A list of service resources.
    :type service_resources: list[str]
    :ivar provisioning_state: The provisioning state of the service endpoint policy definition
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'service': {'key': 'properties.service', 'type': 'str'},
        'service_resources': {'key': 'properties.serviceResources', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceEndpointPolicyDefinition, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.description = kwargs.get('description', None)
        self.service = kwargs.get('service', None)
        self.service_resources = kwargs.get('service_resources', None)
        self.provisioning_state = None


class ServiceEndpointPropertiesFormat(msrest.serialization.Model):
    """The service endpoint properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param service: The type of the endpoint service.
    :type service: str
    :param locations: A list of locations.
    :type locations: list[str]
    :ivar provisioning_state: The provisioning state of the service endpoint resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'service': {'key': 'service', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceEndpointPropertiesFormat, self).__init__(**kwargs)
        self.service = kwargs.get('service', None)
        self.locations = kwargs.get('locations', None)
        self.provisioning_state = None


class StaticRoute(msrest.serialization.Model):
    """List of all Static Routes.

    :param name: The name of the StaticRoute that is unique within a VnetRoute.
    :type name: str
    :param address_prefixes: List of all address prefixes.
    :type address_prefixes: list[str]
    :param next_hop_ip_address: The ip address of the next hop.
    :type next_hop_ip_address: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StaticRoute, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)


class Subnet(SubResource):
    """Subnet in a virtual network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param address_prefix: The address prefix for the subnet.
    :type address_prefix: str
    :param address_prefixes: List of address prefixes for the subnet.
    :type address_prefixes: list[str]
    :param network_security_group: The reference to the NetworkSecurityGroup resource.
    :type network_security_group:
     ~virtual_wan_as_aservice_management_client.models.NetworkSecurityGroup
    :param route_table: The reference to the RouteTable resource.
    :type route_table: ~virtual_wan_as_aservice_management_client.models.RouteTable
    :param nat_gateway: Nat gateway associated with this subnet.
    :type nat_gateway: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param service_endpoints: An array of service endpoints.
    :type service_endpoints:
     list[~virtual_wan_as_aservice_management_client.models.ServiceEndpointPropertiesFormat]
    :param service_endpoint_policies: An array of service endpoint policies.
    :type service_endpoint_policies:
     list[~virtual_wan_as_aservice_management_client.models.ServiceEndpointPolicy]
    :ivar private_endpoints: An array of references to private endpoints.
    :vartype private_endpoints:
     list[~virtual_wan_as_aservice_management_client.models.PrivateEndpoint]
    :ivar ip_configurations: An array of references to the network interface IP configurations
     using subnet.
    :vartype ip_configurations:
     list[~virtual_wan_as_aservice_management_client.models.IPConfiguration]
    :ivar ip_configuration_profiles: Array of IP configuration profiles which reference this
     subnet.
    :vartype ip_configuration_profiles:
     list[~virtual_wan_as_aservice_management_client.models.IPConfigurationProfile]
    :param ip_allocations: Array of IpAllocation which reference this subnet.
    :type ip_allocations: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar resource_navigation_links: An array of references to the external resources using subnet.
    :vartype resource_navigation_links:
     list[~virtual_wan_as_aservice_management_client.models.ResourceNavigationLink]
    :ivar service_association_links: An array of references to services injecting into this subnet.
    :vartype service_association_links:
     list[~virtual_wan_as_aservice_management_client.models.ServiceAssociationLink]
    :param delegations: An array of references to the delegations on the subnet.
    :type delegations: list[~virtual_wan_as_aservice_management_client.models.Delegation]
    :ivar purpose: A read-only string identifying the intention of use for this subnet based on
     delegations and other user-defined properties.
    :vartype purpose: str
    :ivar provisioning_state: The provisioning state of the subnet resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param private_endpoint_network_policies: Enable or Disable apply network policies on private
     end point in the subnet.
    :type private_endpoint_network_policies: str
    :param private_link_service_network_policies: Enable or Disable apply network policies on
     private link service in the subnet.
    :type private_link_service_network_policies: str
    """

    _validation = {
        'etag': {'readonly': True},
        'private_endpoints': {'readonly': True},
        'ip_configurations': {'readonly': True},
        'ip_configuration_profiles': {'readonly': True},
        'resource_navigation_links': {'readonly': True},
        'service_association_links': {'readonly': True},
        'purpose': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'address_prefixes': {'key': 'properties.addressPrefixes', 'type': '[str]'},
        'network_security_group': {'key': 'properties.networkSecurityGroup', 'type': 'NetworkSecurityGroup'},
        'route_table': {'key': 'properties.routeTable', 'type': 'RouteTable'},
        'nat_gateway': {'key': 'properties.natGateway', 'type': 'SubResource'},
        'service_endpoints': {'key': 'properties.serviceEndpoints', 'type': '[ServiceEndpointPropertiesFormat]'},
        'service_endpoint_policies': {'key': 'properties.serviceEndpointPolicies', 'type': '[ServiceEndpointPolicy]'},
        'private_endpoints': {'key': 'properties.privateEndpoints', 'type': '[PrivateEndpoint]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[IPConfiguration]'},
        'ip_configuration_profiles': {'key': 'properties.ipConfigurationProfiles', 'type': '[IPConfigurationProfile]'},
        'ip_allocations': {'key': 'properties.ipAllocations', 'type': '[SubResource]'},
        'resource_navigation_links': {'key': 'properties.resourceNavigationLinks', 'type': '[ResourceNavigationLink]'},
        'service_association_links': {'key': 'properties.serviceAssociationLinks', 'type': '[ServiceAssociationLink]'},
        'delegations': {'key': 'properties.delegations', 'type': '[Delegation]'},
        'purpose': {'key': 'properties.purpose', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_endpoint_network_policies': {'key': 'properties.privateEndpointNetworkPolicies', 'type': 'str'},
        'private_link_service_network_policies': {'key': 'properties.privateLinkServiceNetworkPolicies', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Subnet, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.address_prefix = kwargs.get('address_prefix', None)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.network_security_group = kwargs.get('network_security_group', None)
        self.route_table = kwargs.get('route_table', None)
        self.nat_gateway = kwargs.get('nat_gateway', None)
        self.service_endpoints = kwargs.get('service_endpoints', None)
        self.service_endpoint_policies = kwargs.get('service_endpoint_policies', None)
        self.private_endpoints = None
        self.ip_configurations = None
        self.ip_configuration_profiles = None
        self.ip_allocations = kwargs.get('ip_allocations', None)
        self.resource_navigation_links = None
        self.service_association_links = None
        self.delegations = kwargs.get('delegations', None)
        self.purpose = None
        self.provisioning_state = None
        self.private_endpoint_network_policies = kwargs.get('private_endpoint_network_policies', None)
        self.private_link_service_network_policies = kwargs.get('private_link_service_network_policies', None)


class TagsObject(msrest.serialization.Model):
    """Tags object for patch operations.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TagsObject, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class TrafficAnalyticsConfigurationProperties(msrest.serialization.Model):
    """Parameters that define the configuration of traffic analytics.

    :param enabled: Flag to enable/disable traffic analytics.
    :type enabled: bool
    :param workspace_id: The resource guid of the attached workspace.
    :type workspace_id: str
    :param workspace_region: The location of the attached workspace.
    :type workspace_region: str
    :param workspace_resource_id: Resource Id of the attached workspace.
    :type workspace_resource_id: str
    :param traffic_analytics_interval: The interval in minutes which would decide how frequently TA
     service should do flow analytics.
    :type traffic_analytics_interval: int
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'workspace_region': {'key': 'workspaceRegion', 'type': 'str'},
        'workspace_resource_id': {'key': 'workspaceResourceId', 'type': 'str'},
        'traffic_analytics_interval': {'key': 'trafficAnalyticsInterval', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TrafficAnalyticsConfigurationProperties, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.workspace_id = kwargs.get('workspace_id', None)
        self.workspace_region = kwargs.get('workspace_region', None)
        self.workspace_resource_id = kwargs.get('workspace_resource_id', None)
        self.traffic_analytics_interval = kwargs.get('traffic_analytics_interval', None)


class TrafficAnalyticsProperties(msrest.serialization.Model):
    """Parameters that define the configuration of traffic analytics.

    :param network_watcher_flow_analytics_configuration: Parameters that define the configuration
     of traffic analytics.
    :type network_watcher_flow_analytics_configuration:
     ~virtual_wan_as_aservice_management_client.models.TrafficAnalyticsConfigurationProperties
    """

    _attribute_map = {
        'network_watcher_flow_analytics_configuration': {'key': 'networkWatcherFlowAnalyticsConfiguration', 'type': 'TrafficAnalyticsConfigurationProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TrafficAnalyticsProperties, self).__init__(**kwargs)
        self.network_watcher_flow_analytics_configuration = kwargs.get('network_watcher_flow_analytics_configuration', None)


class VirtualHub(Resource):
    """VirtualHub Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param virtual_wan: The VirtualWAN to which the VirtualHub belongs.
    :type virtual_wan: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param vpn_gateway: The VpnGateway associated with this VirtualHub.
    :type vpn_gateway: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param p2_s_vpn_gateway: The P2SVpnGateway associated with this VirtualHub.
    :type p2_s_vpn_gateway: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param express_route_gateway: The expressRouteGateway associated with this VirtualHub.
    :type express_route_gateway: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param azure_firewall: The azureFirewall associated with this VirtualHub.
    :type azure_firewall: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param security_partner_provider: The securityPartnerProvider associated with this VirtualHub.
    :type security_partner_provider: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param address_prefix: Address-prefix for this VirtualHub.
    :type address_prefix: str
    :param route_table: The routeTable associated with this virtual hub.
    :type route_table: ~virtual_wan_as_aservice_management_client.models.VirtualHubRouteTable
    :ivar provisioning_state: The provisioning state of the virtual hub resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param security_provider_name: The Security Provider name.
    :type security_provider_name: str
    :param virtual_hub_route_table_v2_s: List of all virtual hub route table v2s associated with
     this VirtualHub.
    :type virtual_hub_route_table_v2_s:
     list[~virtual_wan_as_aservice_management_client.models.VirtualHubRouteTableV2]
    :param sku: The sku of this VirtualHub.
    :type sku: str
    :ivar routing_state: The routing state. Possible values include: "None", "Provisioned",
     "Provisioning", "Failed".
    :vartype routing_state: str or ~virtual_wan_as_aservice_management_client.models.RoutingState
    :ivar bgp_connections: List of references to Bgp Connections.
    :vartype bgp_connections: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar ip_configurations: List of references to IpConfigurations.
    :vartype ip_configurations: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :param virtual_router_asn: VirtualRouter ASN.
    :type virtual_router_asn: long
    :param virtual_router_ips: VirtualRouter IPs.
    :type virtual_router_ips: list[str]
    :param allow_branch_to_branch_traffic: Flag to control transit for VirtualRouter hub.
    :type allow_branch_to_branch_traffic: bool
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'routing_state': {'readonly': True},
        'bgp_connections': {'readonly': True},
        'ip_configurations': {'readonly': True},
        'virtual_router_asn': {'maximum': 4294967295, 'minimum': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_wan': {'key': 'properties.virtualWan', 'type': 'SubResource'},
        'vpn_gateway': {'key': 'properties.vpnGateway', 'type': 'SubResource'},
        'p2_s_vpn_gateway': {'key': 'properties.p2SVpnGateway', 'type': 'SubResource'},
        'express_route_gateway': {'key': 'properties.expressRouteGateway', 'type': 'SubResource'},
        'azure_firewall': {'key': 'properties.azureFirewall', 'type': 'SubResource'},
        'security_partner_provider': {'key': 'properties.securityPartnerProvider', 'type': 'SubResource'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'route_table': {'key': 'properties.routeTable', 'type': 'VirtualHubRouteTable'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'security_provider_name': {'key': 'properties.securityProviderName', 'type': 'str'},
        'virtual_hub_route_table_v2_s': {'key': 'properties.virtualHubRouteTableV2s', 'type': '[VirtualHubRouteTableV2]'},
        'sku': {'key': 'properties.sku', 'type': 'str'},
        'routing_state': {'key': 'properties.routingState', 'type': 'str'},
        'bgp_connections': {'key': 'properties.bgpConnections', 'type': '[SubResource]'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[SubResource]'},
        'virtual_router_asn': {'key': 'properties.virtualRouterAsn', 'type': 'long'},
        'virtual_router_ips': {'key': 'properties.virtualRouterIps', 'type': '[str]'},
        'allow_branch_to_branch_traffic': {'key': 'properties.allowBranchToBranchTraffic', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHub, self).__init__(**kwargs)
        self.etag = None
        self.virtual_wan = kwargs.get('virtual_wan', None)
        self.vpn_gateway = kwargs.get('vpn_gateway', None)
        self.p2_s_vpn_gateway = kwargs.get('p2_s_vpn_gateway', None)
        self.express_route_gateway = kwargs.get('express_route_gateway', None)
        self.azure_firewall = kwargs.get('azure_firewall', None)
        self.security_partner_provider = kwargs.get('security_partner_provider', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.route_table = kwargs.get('route_table', None)
        self.provisioning_state = None
        self.security_provider_name = kwargs.get('security_provider_name', None)
        self.virtual_hub_route_table_v2_s = kwargs.get('virtual_hub_route_table_v2_s', None)
        self.sku = kwargs.get('sku', None)
        self.routing_state = None
        self.bgp_connections = None
        self.ip_configurations = None
        self.virtual_router_asn = kwargs.get('virtual_router_asn', None)
        self.virtual_router_ips = kwargs.get('virtual_router_ips', None)
        self.allow_branch_to_branch_traffic = kwargs.get('allow_branch_to_branch_traffic', None)


class VirtualHubEffectiveRoute(msrest.serialization.Model):
    """The effective route configured on the virtual hub or specified resource.

    :param address_prefixes: The list of address prefixes.
    :type address_prefixes: list[str]
    :param next_hops: The list of next hops.
    :type next_hops: list[str]
    :param next_hop_type: The type of the next hop.
    :type next_hop_type: str
    :param as_path: The ASPath of this route.
    :type as_path: str
    :param route_origin: The origin of this route.
    :type route_origin: str
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'next_hops': {'key': 'nextHops', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'as_path': {'key': 'asPath', 'type': 'str'},
        'route_origin': {'key': 'routeOrigin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubEffectiveRoute, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.next_hops = kwargs.get('next_hops', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.as_path = kwargs.get('as_path', None)
        self.route_origin = kwargs.get('route_origin', None)


class VirtualHubEffectiveRouteList(msrest.serialization.Model):
    """EffectiveRoutes List.

    :param value: The list of effective routes configured on the virtual hub or the specified
     resource.
    :type value: list[~virtual_wan_as_aservice_management_client.models.VirtualHubEffectiveRoute]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualHubEffectiveRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubEffectiveRouteList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class VirtualHubId(msrest.serialization.Model):
    """Virtual Hub identifier.

    :param id: The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be
     deployed. The Virtual Hub resource and the ExpressRoute gateway resource reside in the same
     subscription.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubId, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualHubRoute(msrest.serialization.Model):
    """VirtualHub route.

    :param address_prefixes: List of all addressPrefixes.
    :type address_prefixes: list[str]
    :param next_hop_ip_address: NextHop ip address.
    :type next_hop_ip_address: str
    """

    _attribute_map = {
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubRoute, self).__init__(**kwargs)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)


class VirtualHubRouteTable(msrest.serialization.Model):
    """VirtualHub route table.

    :param routes: List of all routes.
    :type routes: list[~virtual_wan_as_aservice_management_client.models.VirtualHubRoute]
    """

    _attribute_map = {
        'routes': {'key': 'routes', 'type': '[VirtualHubRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubRouteTable, self).__init__(**kwargs)
        self.routes = kwargs.get('routes', None)


class VirtualHubRouteTableV2(SubResource):
    """VirtualHubRouteTableV2 Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param routes: List of all routes.
    :type routes: list[~virtual_wan_as_aservice_management_client.models.VirtualHubRouteV2]
    :param attached_connections: List of all connections attached to this route table v2.
    :type attached_connections: list[str]
    :ivar provisioning_state: The provisioning state of the virtual hub route table v2 resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'routes': {'key': 'properties.routes', 'type': '[VirtualHubRouteV2]'},
        'attached_connections': {'key': 'properties.attachedConnections', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubRouteTableV2, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.routes = kwargs.get('routes', None)
        self.attached_connections = kwargs.get('attached_connections', None)
        self.provisioning_state = None


class VirtualHubRouteV2(msrest.serialization.Model):
    """VirtualHubRouteTableV2 route.

    :param destination_type: The type of destinations.
    :type destination_type: str
    :param destinations: List of all destinations.
    :type destinations: list[str]
    :param next_hop_type: The type of next hops.
    :type next_hop_type: str
    :param next_hops: NextHops ip address.
    :type next_hops: list[str]
    """

    _attribute_map = {
        'destination_type': {'key': 'destinationType', 'type': 'str'},
        'destinations': {'key': 'destinations', 'type': '[str]'},
        'next_hop_type': {'key': 'nextHopType', 'type': 'str'},
        'next_hops': {'key': 'nextHops', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualHubRouteV2, self).__init__(**kwargs)
        self.destination_type = kwargs.get('destination_type', None)
        self.destinations = kwargs.get('destinations', None)
        self.next_hop_type = kwargs.get('next_hop_type', None)
        self.next_hops = kwargs.get('next_hops', None)


class VirtualNetworkTap(Resource):
    """Virtual Network Tap resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar network_interface_tap_configurations: Specifies the list of resource IDs for the network
     interface IP configuration that needs to be tapped.
    :vartype network_interface_tap_configurations:
     list[~virtual_wan_as_aservice_management_client.models.NetworkInterfaceTapConfiguration]
    :ivar resource_guid: The resource GUID property of the virtual network tap resource.
    :vartype resource_guid: str
    :ivar provisioning_state: The provisioning state of the virtual network tap resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param destination_network_interface_ip_configuration: The reference to the private IP Address
     of the collector nic that will receive the tap.
    :type destination_network_interface_ip_configuration:
     ~virtual_wan_as_aservice_management_client.models.NetworkInterfaceIPConfiguration
    :param destination_load_balancer_front_end_ip_configuration: The reference to the private IP
     address on the internal Load Balancer that will receive the tap.
    :type destination_load_balancer_front_end_ip_configuration:
     ~virtual_wan_as_aservice_management_client.models.FrontendIPConfiguration
    :param destination_port: The VXLAN destination port that will receive the tapped traffic.
    :type destination_port: int
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'network_interface_tap_configurations': {'readonly': True},
        'resource_guid': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'network_interface_tap_configurations': {'key': 'properties.networkInterfaceTapConfigurations', 'type': '[NetworkInterfaceTapConfiguration]'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'destination_network_interface_ip_configuration': {'key': 'properties.destinationNetworkInterfaceIPConfiguration', 'type': 'NetworkInterfaceIPConfiguration'},
        'destination_load_balancer_front_end_ip_configuration': {'key': 'properties.destinationLoadBalancerFrontEndIPConfiguration', 'type': 'FrontendIPConfiguration'},
        'destination_port': {'key': 'properties.destinationPort', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualNetworkTap, self).__init__(**kwargs)
        self.etag = None
        self.network_interface_tap_configurations = None
        self.resource_guid = None
        self.provisioning_state = None
        self.destination_network_interface_ip_configuration = kwargs.get('destination_network_interface_ip_configuration', None)
        self.destination_load_balancer_front_end_ip_configuration = kwargs.get('destination_load_balancer_front_end_ip_configuration', None)
        self.destination_port = kwargs.get('destination_port', None)


class VirtualWAN(Resource):
    """VirtualWAN Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param disable_vpn_encryption: Vpn encryption to be disabled or not.
    :type disable_vpn_encryption: bool
    :ivar virtual_hubs: List of VirtualHubs in the VirtualWAN.
    :vartype virtual_hubs: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar vpn_sites: List of VpnSites in the VirtualWAN.
    :vartype vpn_sites: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :param allow_branch_to_branch_traffic: True if branch to branch traffic is allowed.
    :type allow_branch_to_branch_traffic: bool
    :param allow_vnet_to_vnet_traffic: True if Vnet to Vnet traffic is allowed.
    :type allow_vnet_to_vnet_traffic: bool
    :ivar office365_local_breakout_category: The office local breakout category. Possible values
     include: "Optimize", "OptimizeAndAllow", "All", "None".
    :vartype office365_local_breakout_category: str or
     ~virtual_wan_as_aservice_management_client.models.OfficeTrafficCategory
    :ivar provisioning_state: The provisioning state of the virtual WAN resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param type_properties_type: The type of the VirtualWAN.
    :type type_properties_type: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'virtual_hubs': {'readonly': True},
        'vpn_sites': {'readonly': True},
        'office365_local_breakout_category': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'disable_vpn_encryption': {'key': 'properties.disableVpnEncryption', 'type': 'bool'},
        'virtual_hubs': {'key': 'properties.virtualHubs', 'type': '[SubResource]'},
        'vpn_sites': {'key': 'properties.vpnSites', 'type': '[SubResource]'},
        'allow_branch_to_branch_traffic': {'key': 'properties.allowBranchToBranchTraffic', 'type': 'bool'},
        'allow_vnet_to_vnet_traffic': {'key': 'properties.allowVnetToVnetTraffic', 'type': 'bool'},
        'office365_local_breakout_category': {'key': 'properties.office365LocalBreakoutCategory', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualWAN, self).__init__(**kwargs)
        self.etag = None
        self.disable_vpn_encryption = kwargs.get('disable_vpn_encryption', None)
        self.virtual_hubs = None
        self.vpn_sites = None
        self.allow_branch_to_branch_traffic = kwargs.get('allow_branch_to_branch_traffic', None)
        self.allow_vnet_to_vnet_traffic = kwargs.get('allow_vnet_to_vnet_traffic', None)
        self.office365_local_breakout_category = None
        self.provisioning_state = None
        self.type_properties_type = kwargs.get('type_properties_type', None)


class VirtualWanSecurityProvider(msrest.serialization.Model):
    """Collection of SecurityProviders.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param name: Name of the security provider.
    :type name: str
    :param url: Url of the security provider.
    :type url: str
    :ivar type: Name of the security provider. Possible values include: "External", "Native".
    :vartype type: str or
     ~virtual_wan_as_aservice_management_client.models.VirtualWanSecurityProviderType
    """

    _validation = {
        'type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualWanSecurityProvider, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.url = kwargs.get('url', None)
        self.type = None


class VirtualWanSecurityProviders(msrest.serialization.Model):
    """Collection of SecurityProviders.

    :param supported_providers: List of VirtualWAN security providers.
    :type supported_providers:
     list[~virtual_wan_as_aservice_management_client.models.VirtualWanSecurityProvider]
    """

    _attribute_map = {
        'supported_providers': {'key': 'supportedProviders', 'type': '[VirtualWanSecurityProvider]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualWanSecurityProviders, self).__init__(**kwargs)
        self.supported_providers = kwargs.get('supported_providers', None)


class VirtualWanVpnProfileParameters(msrest.serialization.Model):
    """Virtual Wan Vpn profile parameters Vpn profile generation.

    :param vpn_server_configuration_resource_id: VpnServerConfiguration partial resource uri with
     which VirtualWan is associated to.
    :type vpn_server_configuration_resource_id: str
    :param authentication_method: VPN client authentication method. Possible values include:
     "EAPTLS", "EAPMSCHAPv2".
    :type authentication_method: str or
     ~virtual_wan_as_aservice_management_client.models.AuthenticationMethod
    """

    _attribute_map = {
        'vpn_server_configuration_resource_id': {'key': 'vpnServerConfigurationResourceId', 'type': 'str'},
        'authentication_method': {'key': 'authenticationMethod', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualWanVpnProfileParameters, self).__init__(**kwargs)
        self.vpn_server_configuration_resource_id = kwargs.get('vpn_server_configuration_resource_id', None)
        self.authentication_method = kwargs.get('authentication_method', None)


class VnetRoute(msrest.serialization.Model):
    """List of routes that control routing from VirtualHub into a virtual network connection.

    :param static_routes: List of all Static Routes.
    :type static_routes: list[~virtual_wan_as_aservice_management_client.models.StaticRoute]
    """

    _attribute_map = {
        'static_routes': {'key': 'staticRoutes', 'type': '[StaticRoute]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VnetRoute, self).__init__(**kwargs)
        self.static_routes = kwargs.get('static_routes', None)


class VpnClientConnectionHealth(msrest.serialization.Model):
    """VpnClientConnectionHealth properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar total_ingress_bytes_transferred: Total of the Ingress Bytes Transferred in this P2S Vpn
     connection.
    :vartype total_ingress_bytes_transferred: long
    :ivar total_egress_bytes_transferred: Total of the Egress Bytes Transferred in this connection.
    :vartype total_egress_bytes_transferred: long
    :param vpn_client_connections_count: The total of p2s vpn clients connected at this time to
     this P2SVpnGateway.
    :type vpn_client_connections_count: int
    :param allocated_ip_addresses: List of allocated ip addresses to the connected p2s vpn clients.
    :type allocated_ip_addresses: list[str]
    """

    _validation = {
        'total_ingress_bytes_transferred': {'readonly': True},
        'total_egress_bytes_transferred': {'readonly': True},
    }

    _attribute_map = {
        'total_ingress_bytes_transferred': {'key': 'totalIngressBytesTransferred', 'type': 'long'},
        'total_egress_bytes_transferred': {'key': 'totalEgressBytesTransferred', 'type': 'long'},
        'vpn_client_connections_count': {'key': 'vpnClientConnectionsCount', 'type': 'int'},
        'allocated_ip_addresses': {'key': 'allocatedIpAddresses', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnClientConnectionHealth, self).__init__(**kwargs)
        self.total_ingress_bytes_transferred = None
        self.total_egress_bytes_transferred = None
        self.vpn_client_connections_count = kwargs.get('vpn_client_connections_count', None)
        self.allocated_ip_addresses = kwargs.get('allocated_ip_addresses', None)


class VpnConnection(SubResource):
    """VpnConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param remote_vpn_site: Id of the connected vpn site.
    :type remote_vpn_site: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param routing_weight: Routing weight for vpn connection.
    :type routing_weight: int
    :param dpd_timeout_seconds: DPD timeout in seconds for vpn connection.
    :type dpd_timeout_seconds: int
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~virtual_wan_as_aservice_management_client.models.VpnConnectionStatus
    :param vpn_connection_protocol_type: Connection protocol used for this connection. Possible
     values include: "IKEv2", "IKEv1".
    :type vpn_connection_protocol_type: str or
     ~virtual_wan_as_aservice_management_client.models.VirtualNetworkGatewayConnectionProtocol
    :ivar ingress_bytes_transferred: Ingress bytes transferred.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: Egress bytes transferred.
    :vartype egress_bytes_transferred: long
    :param connection_bandwidth: Expected bandwidth in MBPS.
    :type connection_bandwidth: int
    :param shared_key: SharedKey for the vpn connection.
    :type shared_key: str
    :param enable_bgp: EnableBgp flag.
    :type enable_bgp: bool
    :param use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :type use_policy_based_traffic_selectors: bool
    :param ipsec_policies: The IPSec Policies to be considered by this connection.
    :type ipsec_policies: list[~virtual_wan_as_aservice_management_client.models.IpsecPolicy]
    :param enable_rate_limiting: EnableBgp flag.
    :type enable_rate_limiting: bool
    :param enable_internet_security: Enable internet security.
    :type enable_internet_security: bool
    :param use_local_azure_ip_address: Use local azure ip to initiate connection.
    :type use_local_azure_ip_address: bool
    :ivar provisioning_state: The provisioning state of the VPN connection resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param vpn_link_connections: List of all vpn site link connections to the gateway.
    :type vpn_link_connections:
     list[~virtual_wan_as_aservice_management_client.models.VpnSiteLinkConnection]
    :param routing_configuration: The Routing Configuration indicating the associated and
     propagated route tables on this connection.
    :type routing_configuration:
     ~virtual_wan_as_aservice_management_client.models.RoutingConfiguration
    """

    _validation = {
        'etag': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'remote_vpn_site': {'key': 'properties.remoteVpnSite', 'type': 'SubResource'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'dpd_timeout_seconds': {'key': 'properties.dpdTimeoutSeconds', 'type': 'int'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'vpn_connection_protocol_type': {'key': 'properties.vpnConnectionProtocolType', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'connection_bandwidth': {'key': 'properties.connectionBandwidth', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'enable_rate_limiting': {'key': 'properties.enableRateLimiting', 'type': 'bool'},
        'enable_internet_security': {'key': 'properties.enableInternetSecurity', 'type': 'bool'},
        'use_local_azure_ip_address': {'key': 'properties.useLocalAzureIpAddress', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'vpn_link_connections': {'key': 'properties.vpnLinkConnections', 'type': '[VpnSiteLinkConnection]'},
        'routing_configuration': {'key': 'properties.routingConfiguration', 'type': 'RoutingConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.remote_vpn_site = kwargs.get('remote_vpn_site', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.dpd_timeout_seconds = kwargs.get('dpd_timeout_seconds', None)
        self.connection_status = None
        self.vpn_connection_protocol_type = kwargs.get('vpn_connection_protocol_type', None)
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.connection_bandwidth = kwargs.get('connection_bandwidth', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.enable_rate_limiting = kwargs.get('enable_rate_limiting', None)
        self.enable_internet_security = kwargs.get('enable_internet_security', None)
        self.use_local_azure_ip_address = kwargs.get('use_local_azure_ip_address', None)
        self.provisioning_state = None
        self.vpn_link_connections = kwargs.get('vpn_link_connections', None)
        self.routing_configuration = kwargs.get('routing_configuration', None)


class VpnConnectionPacketCaptureStartParameters(msrest.serialization.Model):
    """Vpn Connection packet capture parameters supplied to start packet capture on gateway connection.

    :param filter_data: Start Packet capture parameters on vpn connection.
    :type filter_data: str
    :param link_connection_names: List of site link connection names.
    :type link_connection_names: list[str]
    """

    _attribute_map = {
        'filter_data': {'key': 'filterData', 'type': 'str'},
        'link_connection_names': {'key': 'linkConnectionNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnConnectionPacketCaptureStartParameters, self).__init__(**kwargs)
        self.filter_data = kwargs.get('filter_data', None)
        self.link_connection_names = kwargs.get('link_connection_names', None)


class VpnConnectionPacketCaptureStopParameters(msrest.serialization.Model):
    """Vpn Connection packet capture parameters supplied to stop packet capture on gateway connection.

    :param sas_url: SAS url for packet capture on vpn connection.
    :type sas_url: str
    :param link_connection_names: List of site link connection names.
    :type link_connection_names: list[str]
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
        'link_connection_names': {'key': 'linkConnectionNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnConnectionPacketCaptureStopParameters, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)
        self.link_connection_names = kwargs.get('link_connection_names', None)


class VpnGateway(Resource):
    """VpnGateway Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param virtual_hub: The VirtualHub to which the gateway belongs.
    :type virtual_hub: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param connections: List of all vpn connections to the gateway.
    :type connections: list[~virtual_wan_as_aservice_management_client.models.VpnConnection]
    :param bgp_settings: Local network gateway's BGP speaker settings.
    :type bgp_settings: ~virtual_wan_as_aservice_management_client.models.BgpSettings
    :ivar provisioning_state: The provisioning state of the VPN gateway resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param vpn_gateway_scale_unit: The scale unit for this vpn gateway.
    :type vpn_gateway_scale_unit: int
    :ivar ip_configurations: List of all IPs configured on the gateway.
    :vartype ip_configurations:
     list[~virtual_wan_as_aservice_management_client.models.VpnGatewayIpConfiguration]
    :param is_routing_preference_internet: Enable Routing Preference property for the Public IP
     Interface of the VpnGateway.
    :type is_routing_preference_internet: bool
    :param nat_rules: List of all the nat Rules associated with the gateway.
    :type nat_rules: list[~virtual_wan_as_aservice_management_client.models.VpnGatewayNatRule]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'ip_configurations': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_hub': {'key': 'properties.virtualHub', 'type': 'SubResource'},
        'connections': {'key': 'properties.connections', 'type': '[VpnConnection]'},
        'bgp_settings': {'key': 'properties.bgpSettings', 'type': 'BgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'vpn_gateway_scale_unit': {'key': 'properties.vpnGatewayScaleUnit', 'type': 'int'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[VpnGatewayIpConfiguration]'},
        'is_routing_preference_internet': {'key': 'properties.isRoutingPreferenceInternet', 'type': 'bool'},
        'nat_rules': {'key': 'properties.natRules', 'type': '[VpnGatewayNatRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnGateway, self).__init__(**kwargs)
        self.etag = None
        self.virtual_hub = kwargs.get('virtual_hub', None)
        self.connections = kwargs.get('connections', None)
        self.bgp_settings = kwargs.get('bgp_settings', None)
        self.provisioning_state = None
        self.vpn_gateway_scale_unit = kwargs.get('vpn_gateway_scale_unit', None)
        self.ip_configurations = None
        self.is_routing_preference_internet = kwargs.get('is_routing_preference_internet', None)
        self.nat_rules = kwargs.get('nat_rules', None)


class VpnGatewayIpConfiguration(msrest.serialization.Model):
    """IP Configuration of a VPN Gateway Resource.

    :param id: The identifier of the IP configuration for a VPN Gateway.
    :type id: str
    :param public_ip_address: The public IP address of this IP configuration.
    :type public_ip_address: str
    :param private_ip_address: The private IP address of this IP configuration.
    :type private_ip_address: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnGatewayIpConfiguration, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.public_ip_address = kwargs.get('public_ip_address', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)


class VpnGatewayNatRule(SubResource):
    """VpnGatewayNatRule Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar provisioning_state: The provisioning state of the NAT Rule resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param type_properties_type: The type of NAT rule for VPN NAT. Possible values include:
     "Static", "Dynamic".
    :type type_properties_type: str or
     ~virtual_wan_as_aservice_management_client.models.VpnNatRuleType
    :param mode: The Source NAT direction of a VPN NAT. Possible values include: "EgressSnat",
     "IngressSnat".
    :type mode: str or ~virtual_wan_as_aservice_management_client.models.VpnNatRuleMode
    :param internal_mappings: The private IP address internal mapping for NAT.
    :type internal_mappings:
     list[~virtual_wan_as_aservice_management_client.models.VpnNatRuleMapping]
    :param external_mappings: The private IP address external mapping for NAT.
    :type external_mappings:
     list[~virtual_wan_as_aservice_management_client.models.VpnNatRuleMapping]
    :param ip_configuration_id: The IP Configuration ID this NAT rule applies to.
    :type ip_configuration_id: str
    :ivar egress_vpn_site_link_connections: List of egress VpnSiteLinkConnections.
    :vartype egress_vpn_site_link_connections:
     list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :ivar ingress_vpn_site_link_connections: List of ingress VpnSiteLinkConnections.
    :vartype ingress_vpn_site_link_connections:
     list[~virtual_wan_as_aservice_management_client.models.SubResource]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'egress_vpn_site_link_connections': {'readonly': True},
        'ingress_vpn_site_link_connections': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'mode': {'key': 'properties.mode', 'type': 'str'},
        'internal_mappings': {'key': 'properties.internalMappings', 'type': '[VpnNatRuleMapping]'},
        'external_mappings': {'key': 'properties.externalMappings', 'type': '[VpnNatRuleMapping]'},
        'ip_configuration_id': {'key': 'properties.ipConfigurationId', 'type': 'str'},
        'egress_vpn_site_link_connections': {'key': 'properties.egressVpnSiteLinkConnections', 'type': '[SubResource]'},
        'ingress_vpn_site_link_connections': {'key': 'properties.ingressVpnSiteLinkConnections', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnGatewayNatRule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.provisioning_state = None
        self.type_properties_type = kwargs.get('type_properties_type', None)
        self.mode = kwargs.get('mode', None)
        self.internal_mappings = kwargs.get('internal_mappings', None)
        self.external_mappings = kwargs.get('external_mappings', None)
        self.ip_configuration_id = kwargs.get('ip_configuration_id', None)
        self.egress_vpn_site_link_connections = None
        self.ingress_vpn_site_link_connections = None


class VpnGatewayPacketCaptureStartParameters(msrest.serialization.Model):
    """Start packet capture parameters.

    :param filter_data: Start Packet capture parameters on vpn gateway.
    :type filter_data: str
    """

    _attribute_map = {
        'filter_data': {'key': 'filterData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnGatewayPacketCaptureStartParameters, self).__init__(**kwargs)
        self.filter_data = kwargs.get('filter_data', None)


class VpnGatewayPacketCaptureStopParameters(msrest.serialization.Model):
    """Stop packet capture parameters.

    :param sas_url: SAS url for packet capture on vpn gateway.
    :type sas_url: str
    """

    _attribute_map = {
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnGatewayPacketCaptureStopParameters, self).__init__(**kwargs)
        self.sas_url = kwargs.get('sas_url', None)


class VpnLinkBgpSettings(msrest.serialization.Model):
    """BGP settings details for a link.

    :param asn: The BGP speaker's ASN.
    :type asn: long
    :param bgp_peering_address: The BGP peering address and BGP identifier of this BGP speaker.
    :type bgp_peering_address: str
    """

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'long'},
        'bgp_peering_address': {'key': 'bgpPeeringAddress', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnLinkBgpSettings, self).__init__(**kwargs)
        self.asn = kwargs.get('asn', None)
        self.bgp_peering_address = kwargs.get('bgp_peering_address', None)


class VpnLinkProviderProperties(msrest.serialization.Model):
    """List of properties of a link provider.

    :param link_provider_name: Name of the link provider.
    :type link_provider_name: str
    :param link_speed_in_mbps: Link speed.
    :type link_speed_in_mbps: int
    """

    _attribute_map = {
        'link_provider_name': {'key': 'linkProviderName', 'type': 'str'},
        'link_speed_in_mbps': {'key': 'linkSpeedInMbps', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnLinkProviderProperties, self).__init__(**kwargs)
        self.link_provider_name = kwargs.get('link_provider_name', None)
        self.link_speed_in_mbps = kwargs.get('link_speed_in_mbps', None)


class VpnNatRuleMapping(msrest.serialization.Model):
    """Vpn NatRule mapping.

    :param address_space: Address space for Vpn NatRule mapping.
    :type address_space: str
    """

    _attribute_map = {
        'address_space': {'key': 'addressSpace', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnNatRuleMapping, self).__init__(**kwargs)
        self.address_space = kwargs.get('address_space', None)


class VpnProfileResponse(msrest.serialization.Model):
    """Vpn Profile Response for package generation.

    :param profile_url: URL to the VPN profile.
    :type profile_url: str
    """

    _attribute_map = {
        'profile_url': {'key': 'profileUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnProfileResponse, self).__init__(**kwargs)
        self.profile_url = kwargs.get('profile_url', None)


class VpnServerConfigRadiusClientRootCertificate(msrest.serialization.Model):
    """Properties of the Radius client root certificate of VpnServerConfiguration.

    :param name: The certificate name.
    :type name: str
    :param thumbprint: The Radius client root certificate thumbprint.
    :type thumbprint: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'thumbprint': {'key': 'thumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnServerConfigRadiusClientRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.thumbprint = kwargs.get('thumbprint', None)


class VpnServerConfigRadiusServerRootCertificate(msrest.serialization.Model):
    """Properties of Radius Server root certificate of VpnServerConfiguration.

    :param name: The certificate name.
    :type name: str
    :param public_cert_data: The certificate public data.
    :type public_cert_data: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'public_cert_data': {'key': 'publicCertData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnServerConfigRadiusServerRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.public_cert_data = kwargs.get('public_cert_data', None)


class VpnServerConfiguration(Resource):
    """VpnServerConfiguration Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param name_properties_name: The name of the VpnServerConfiguration that is unique within a
     resource group.
    :type name_properties_name: str
    :param vpn_protocols: VPN protocols for the VpnServerConfiguration.
    :type vpn_protocols: list[str or
     ~virtual_wan_as_aservice_management_client.models.VpnGatewayTunnelingProtocol]
    :param vpn_authentication_types: VPN authentication types for the VpnServerConfiguration.
    :type vpn_authentication_types: list[str or
     ~virtual_wan_as_aservice_management_client.models.VpnAuthenticationType]
    :param vpn_client_root_certificates: VPN client root certificate of VpnServerConfiguration.
    :type vpn_client_root_certificates:
     list[~virtual_wan_as_aservice_management_client.models.VpnServerConfigVpnClientRootCertificate]
    :param vpn_client_revoked_certificates: VPN client revoked certificate of
     VpnServerConfiguration.
    :type vpn_client_revoked_certificates:
     list[~virtual_wan_as_aservice_management_client.models.VpnServerConfigVpnClientRevokedCertificate]
    :param radius_server_root_certificates: Radius Server root certificate of
     VpnServerConfiguration.
    :type radius_server_root_certificates:
     list[~virtual_wan_as_aservice_management_client.models.VpnServerConfigRadiusServerRootCertificate]
    :param radius_client_root_certificates: Radius client root certificate of
     VpnServerConfiguration.
    :type radius_client_root_certificates:
     list[~virtual_wan_as_aservice_management_client.models.VpnServerConfigRadiusClientRootCertificate]
    :param vpn_client_ipsec_policies: VpnClientIpsecPolicies for VpnServerConfiguration.
    :type vpn_client_ipsec_policies:
     list[~virtual_wan_as_aservice_management_client.models.IpsecPolicy]
    :param radius_server_address: The radius server address property of the VpnServerConfiguration
     resource for point to site client connection.
    :type radius_server_address: str
    :param radius_server_secret: The radius secret property of the VpnServerConfiguration resource
     for point to site client connection.
    :type radius_server_secret: str
    :param radius_servers: Multiple Radius Server configuration for VpnServerConfiguration.
    :type radius_servers: list[~virtual_wan_as_aservice_management_client.models.RadiusServer]
    :param aad_authentication_parameters: The set of aad vpn authentication parameters.
    :type aad_authentication_parameters:
     ~virtual_wan_as_aservice_management_client.models.AadAuthenticationParameters
    :ivar provisioning_state: The provisioning state of the VpnServerConfiguration resource.
     Possible values are: 'Updating', 'Deleting', and 'Failed'.
    :vartype provisioning_state: str
    :ivar p2_s_vpn_gateways: List of references to P2SVpnGateways.
    :vartype p2_s_vpn_gateways:
     list[~virtual_wan_as_aservice_management_client.models.P2SVpnGateway]
    :ivar etag_properties_etag: A unique read-only string that changes whenever the resource is
     updated.
    :vartype etag_properties_etag: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'p2_s_vpn_gateways': {'readonly': True},
        'etag_properties_etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'name_properties_name': {'key': 'properties.name', 'type': 'str'},
        'vpn_protocols': {'key': 'properties.vpnProtocols', 'type': '[str]'},
        'vpn_authentication_types': {'key': 'properties.vpnAuthenticationTypes', 'type': '[str]'},
        'vpn_client_root_certificates': {'key': 'properties.vpnClientRootCertificates', 'type': '[VpnServerConfigVpnClientRootCertificate]'},
        'vpn_client_revoked_certificates': {'key': 'properties.vpnClientRevokedCertificates', 'type': '[VpnServerConfigVpnClientRevokedCertificate]'},
        'radius_server_root_certificates': {'key': 'properties.radiusServerRootCertificates', 'type': '[VpnServerConfigRadiusServerRootCertificate]'},
        'radius_client_root_certificates': {'key': 'properties.radiusClientRootCertificates', 'type': '[VpnServerConfigRadiusClientRootCertificate]'},
        'vpn_client_ipsec_policies': {'key': 'properties.vpnClientIpsecPolicies', 'type': '[IpsecPolicy]'},
        'radius_server_address': {'key': 'properties.radiusServerAddress', 'type': 'str'},
        'radius_server_secret': {'key': 'properties.radiusServerSecret', 'type': 'str'},
        'radius_servers': {'key': 'properties.radiusServers', 'type': '[RadiusServer]'},
        'aad_authentication_parameters': {'key': 'properties.aadAuthenticationParameters', 'type': 'AadAuthenticationParameters'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'p2_s_vpn_gateways': {'key': 'properties.p2SVpnGateways', 'type': '[P2SVpnGateway]'},
        'etag_properties_etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnServerConfiguration, self).__init__(**kwargs)
        self.etag = None
        self.name_properties_name = kwargs.get('name_properties_name', None)
        self.vpn_protocols = kwargs.get('vpn_protocols', None)
        self.vpn_authentication_types = kwargs.get('vpn_authentication_types', None)
        self.vpn_client_root_certificates = kwargs.get('vpn_client_root_certificates', None)
        self.vpn_client_revoked_certificates = kwargs.get('vpn_client_revoked_certificates', None)
        self.radius_server_root_certificates = kwargs.get('radius_server_root_certificates', None)
        self.radius_client_root_certificates = kwargs.get('radius_client_root_certificates', None)
        self.vpn_client_ipsec_policies = kwargs.get('vpn_client_ipsec_policies', None)
        self.radius_server_address = kwargs.get('radius_server_address', None)
        self.radius_server_secret = kwargs.get('radius_server_secret', None)
        self.radius_servers = kwargs.get('radius_servers', None)
        self.aad_authentication_parameters = kwargs.get('aad_authentication_parameters', None)
        self.provisioning_state = None
        self.p2_s_vpn_gateways = None
        self.etag_properties_etag = None


class VpnServerConfigurationsResponse(msrest.serialization.Model):
    """VpnServerConfigurations list associated with VirtualWan Response.

    :param vpn_server_configuration_resource_ids: List of VpnServerConfigurations associated with
     VirtualWan.
    :type vpn_server_configuration_resource_ids: list[str]
    """

    _attribute_map = {
        'vpn_server_configuration_resource_ids': {'key': 'vpnServerConfigurationResourceIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnServerConfigurationsResponse, self).__init__(**kwargs)
        self.vpn_server_configuration_resource_ids = kwargs.get('vpn_server_configuration_resource_ids', None)


class VpnServerConfigVpnClientRevokedCertificate(msrest.serialization.Model):
    """Properties of the revoked VPN client certificate of VpnServerConfiguration.

    :param name: The certificate name.
    :type name: str
    :param thumbprint: The revoked VPN client certificate thumbprint.
    :type thumbprint: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'thumbprint': {'key': 'thumbprint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnServerConfigVpnClientRevokedCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.thumbprint = kwargs.get('thumbprint', None)


class VpnServerConfigVpnClientRootCertificate(msrest.serialization.Model):
    """Properties of VPN client root certificate of VpnServerConfiguration.

    :param name: The certificate name.
    :type name: str
    :param public_cert_data: The certificate public data.
    :type public_cert_data: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'public_cert_data': {'key': 'publicCertData', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnServerConfigVpnClientRootCertificate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.public_cert_data = kwargs.get('public_cert_data', None)


class VpnSite(Resource):
    """VpnSite Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param virtual_wan: The VirtualWAN to which the vpnSite belongs.
    :type virtual_wan: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param device_properties: The device properties.
    :type device_properties: ~virtual_wan_as_aservice_management_client.models.DeviceProperties
    :param ip_address: The ip-address for the vpn-site.
    :type ip_address: str
    :param site_key: The key for vpn-site that can be used for connections.
    :type site_key: str
    :param address_space: The AddressSpace that contains an array of IP address ranges.
    :type address_space: ~virtual_wan_as_aservice_management_client.models.AddressSpace
    :param bgp_properties: The set of bgp properties.
    :type bgp_properties: ~virtual_wan_as_aservice_management_client.models.BgpSettings
    :ivar provisioning_state: The provisioning state of the VPN site resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param is_security_site: IsSecuritySite flag.
    :type is_security_site: bool
    :param vpn_site_links: List of all vpn site links.
    :type vpn_site_links: list[~virtual_wan_as_aservice_management_client.models.VpnSiteLink]
    :param o365_policy: Office365 Policy.
    :type o365_policy: ~virtual_wan_as_aservice_management_client.models.O365PolicyProperties
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'virtual_wan': {'key': 'properties.virtualWan', 'type': 'SubResource'},
        'device_properties': {'key': 'properties.deviceProperties', 'type': 'DeviceProperties'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'site_key': {'key': 'properties.siteKey', 'type': 'str'},
        'address_space': {'key': 'properties.addressSpace', 'type': 'AddressSpace'},
        'bgp_properties': {'key': 'properties.bgpProperties', 'type': 'BgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'is_security_site': {'key': 'properties.isSecuritySite', 'type': 'bool'},
        'vpn_site_links': {'key': 'properties.vpnSiteLinks', 'type': '[VpnSiteLink]'},
        'o365_policy': {'key': 'properties.o365Policy', 'type': 'O365PolicyProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnSite, self).__init__(**kwargs)
        self.etag = None
        self.virtual_wan = kwargs.get('virtual_wan', None)
        self.device_properties = kwargs.get('device_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.site_key = kwargs.get('site_key', None)
        self.address_space = kwargs.get('address_space', None)
        self.bgp_properties = kwargs.get('bgp_properties', None)
        self.provisioning_state = None
        self.is_security_site = kwargs.get('is_security_site', None)
        self.vpn_site_links = kwargs.get('vpn_site_links', None)
        self.o365_policy = kwargs.get('o365_policy', None)


class VpnSiteId(msrest.serialization.Model):
    """VpnSite Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar vpn_site: The resource-uri of the vpn-site for which config is to be fetched.
    :vartype vpn_site: str
    """

    _validation = {
        'vpn_site': {'readonly': True},
    }

    _attribute_map = {
        'vpn_site': {'key': 'vpnSite', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnSiteId, self).__init__(**kwargs)
        self.vpn_site = None


class VpnSiteLink(SubResource):
    """VpnSiteLink Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar type: Resource type.
    :vartype type: str
    :param link_properties: The link provider properties.
    :type link_properties:
     ~virtual_wan_as_aservice_management_client.models.VpnLinkProviderProperties
    :param ip_address: The ip-address for the vpn-site-link.
    :type ip_address: str
    :param fqdn: FQDN of vpn-site-link.
    :type fqdn: str
    :param bgp_properties: The set of bgp properties.
    :type bgp_properties: ~virtual_wan_as_aservice_management_client.models.VpnLinkBgpSettings
    :ivar provisioning_state: The provisioning state of the VPN site link resource. Possible values
     include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'link_properties': {'key': 'properties.linkProperties', 'type': 'VpnLinkProviderProperties'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
        'fqdn': {'key': 'properties.fqdn', 'type': 'str'},
        'bgp_properties': {'key': 'properties.bgpProperties', 'type': 'VpnLinkBgpSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnSiteLink, self).__init__(**kwargs)
        self.etag = None
        self.name = kwargs.get('name', None)
        self.type = None
        self.link_properties = kwargs.get('link_properties', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.fqdn = kwargs.get('fqdn', None)
        self.bgp_properties = kwargs.get('bgp_properties', None)
        self.provisioning_state = None


class VpnSiteLinkConnection(SubResource):
    """VpnSiteLinkConnection Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :param name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :type name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Resource type.
    :vartype type: str
    :param vpn_site_link: Id of the connected vpn site link.
    :type vpn_site_link: ~virtual_wan_as_aservice_management_client.models.SubResource
    :param routing_weight: Routing weight for vpn connection.
    :type routing_weight: int
    :param vpn_link_connection_mode: Vpn link connection mode. Possible values include: "Default",
     "ResponderOnly", "InitiatorOnly".
    :type vpn_link_connection_mode: str or
     ~virtual_wan_as_aservice_management_client.models.VpnLinkConnectionMode
    :ivar connection_status: The connection status. Possible values include: "Unknown",
     "Connecting", "Connected", "NotConnected".
    :vartype connection_status: str or
     ~virtual_wan_as_aservice_management_client.models.VpnConnectionStatus
    :param vpn_connection_protocol_type: Connection protocol used for this connection. Possible
     values include: "IKEv2", "IKEv1".
    :type vpn_connection_protocol_type: str or
     ~virtual_wan_as_aservice_management_client.models.VirtualNetworkGatewayConnectionProtocol
    :ivar ingress_bytes_transferred: Ingress bytes transferred.
    :vartype ingress_bytes_transferred: long
    :ivar egress_bytes_transferred: Egress bytes transferred.
    :vartype egress_bytes_transferred: long
    :param connection_bandwidth: Expected bandwidth in MBPS.
    :type connection_bandwidth: int
    :param shared_key: SharedKey for the vpn connection.
    :type shared_key: str
    :param enable_bgp: EnableBgp flag.
    :type enable_bgp: bool
    :param use_policy_based_traffic_selectors: Enable policy-based traffic selectors.
    :type use_policy_based_traffic_selectors: bool
    :param ipsec_policies: The IPSec Policies to be considered by this connection.
    :type ipsec_policies: list[~virtual_wan_as_aservice_management_client.models.IpsecPolicy]
    :param enable_rate_limiting: EnableBgp flag.
    :type enable_rate_limiting: bool
    :param use_local_azure_ip_address: Use local azure ip to initiate connection.
    :type use_local_azure_ip_address: bool
    :ivar provisioning_state: The provisioning state of the VPN site link connection resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~virtual_wan_as_aservice_management_client.models.ProvisioningState
    :param ingress_nat_rules: List of ingress NatRules.
    :type ingress_nat_rules: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    :param egress_nat_rules: List of egress NatRules.
    :type egress_nat_rules: list[~virtual_wan_as_aservice_management_client.models.SubResource]
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'connection_status': {'readonly': True},
        'ingress_bytes_transferred': {'readonly': True},
        'egress_bytes_transferred': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'vpn_site_link': {'key': 'properties.vpnSiteLink', 'type': 'SubResource'},
        'routing_weight': {'key': 'properties.routingWeight', 'type': 'int'},
        'vpn_link_connection_mode': {'key': 'properties.vpnLinkConnectionMode', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'vpn_connection_protocol_type': {'key': 'properties.vpnConnectionProtocolType', 'type': 'str'},
        'ingress_bytes_transferred': {'key': 'properties.ingressBytesTransferred', 'type': 'long'},
        'egress_bytes_transferred': {'key': 'properties.egressBytesTransferred', 'type': 'long'},
        'connection_bandwidth': {'key': 'properties.connectionBandwidth', 'type': 'int'},
        'shared_key': {'key': 'properties.sharedKey', 'type': 'str'},
        'enable_bgp': {'key': 'properties.enableBgp', 'type': 'bool'},
        'use_policy_based_traffic_selectors': {'key': 'properties.usePolicyBasedTrafficSelectors', 'type': 'bool'},
        'ipsec_policies': {'key': 'properties.ipsecPolicies', 'type': '[IpsecPolicy]'},
        'enable_rate_limiting': {'key': 'properties.enableRateLimiting', 'type': 'bool'},
        'use_local_azure_ip_address': {'key': 'properties.useLocalAzureIpAddress', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'ingress_nat_rules': {'key': 'properties.ingressNatRules', 'type': '[SubResource]'},
        'egress_nat_rules': {'key': 'properties.egressNatRules', 'type': '[SubResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VpnSiteLinkConnection, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.etag = None
        self.type = None
        self.vpn_site_link = kwargs.get('vpn_site_link', None)
        self.routing_weight = kwargs.get('routing_weight', None)
        self.vpn_link_connection_mode = kwargs.get('vpn_link_connection_mode', None)
        self.connection_status = None
        self.vpn_connection_protocol_type = kwargs.get('vpn_connection_protocol_type', None)
        self.ingress_bytes_transferred = None
        self.egress_bytes_transferred = None
        self.connection_bandwidth = kwargs.get('connection_bandwidth', None)
        self.shared_key = kwargs.get('shared_key', None)
        self.enable_bgp = kwargs.get('enable_bgp', None)
        self.use_policy_based_traffic_selectors = kwargs.get('use_policy_based_traffic_selectors', None)
        self.ipsec_policies = kwargs.get('ipsec_policies', None)
        self.enable_rate_limiting = kwargs.get('enable_rate_limiting', None)
        self.use_local_azure_ip_address = kwargs.get('use_local_azure_ip_address', None)
        self.provisioning_state = None
        self.ingress_nat_rules = kwargs.get('ingress_nat_rules', None)
        self.egress_nat_rules = kwargs.get('egress_nat_rules', None)
