# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6349, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._network_management_client_enums import *


class FirewallPolicyRule(msrest.serialization.Model):
    """Properties of a rule.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ApplicationRule, NatRule, NetworkRule.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~network_management_client.models.FirewallPolicyRuleType
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
    }

    _subtype_map = {
        'rule_type': {'ApplicationRule': 'ApplicationRule', 'NatRule': 'NatRule', 'NetworkRule': 'NetworkRule'}
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        """
        super(FirewallPolicyRule, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.rule_type = None  # type: Optional[str]


class ApplicationRule(FirewallPolicyRule):
    """Rule of type application.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~network_management_client.models.FirewallPolicyRuleType
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or Service Tags.
    :vartype destination_addresses: list[str]
    :ivar protocols: Array of Application Protocols.
    :vartype protocols:
     list[~network_management_client.models.FirewallPolicyRuleApplicationProtocol]
    :ivar target_fqdns: List of FQDNs for this rule.
    :vartype target_fqdns: list[str]
    :ivar target_urls: List of Urls for this rule condition.
    :vartype target_urls: list[str]
    :ivar fqdn_tags: List of FQDN Tags for this rule.
    :vartype fqdn_tags: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar terminate_tls: Terminate TLS connections for this rule.
    :vartype terminate_tls: bool
    :ivar web_categories: List of destination azure web categories.
    :vartype web_categories: list[str]
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'protocols': {'key': 'protocols', 'type': '[FirewallPolicyRuleApplicationProtocol]'},
        'target_fqdns': {'key': 'targetFqdns', 'type': '[str]'},
        'target_urls': {'key': 'targetUrls', 'type': '[str]'},
        'fqdn_tags': {'key': 'fqdnTags', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'terminate_tls': {'key': 'terminateTLS', 'type': 'bool'},
        'web_categories': {'key': 'webCategories', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        source_addresses: Optional[List[str]] = None,
        destination_addresses: Optional[List[str]] = None,
        protocols: Optional[List["FirewallPolicyRuleApplicationProtocol"]] = None,
        target_fqdns: Optional[List[str]] = None,
        target_urls: Optional[List[str]] = None,
        fqdn_tags: Optional[List[str]] = None,
        source_ip_groups: Optional[List[str]] = None,
        terminate_tls: Optional[bool] = None,
        web_categories: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or Service Tags.
        :paramtype destination_addresses: list[str]
        :keyword protocols: Array of Application Protocols.
        :paramtype protocols:
         list[~network_management_client.models.FirewallPolicyRuleApplicationProtocol]
        :keyword target_fqdns: List of FQDNs for this rule.
        :paramtype target_fqdns: list[str]
        :keyword target_urls: List of Urls for this rule condition.
        :paramtype target_urls: list[str]
        :keyword fqdn_tags: List of FQDN Tags for this rule.
        :paramtype fqdn_tags: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword terminate_tls: Terminate TLS connections for this rule.
        :paramtype terminate_tls: bool
        :keyword web_categories: List of destination azure web categories.
        :paramtype web_categories: list[str]
        """
        super(ApplicationRule, self).__init__(name=name, description=description, **kwargs)
        self.rule_type = 'ApplicationRule'  # type: str
        self.source_addresses = source_addresses
        self.destination_addresses = destination_addresses
        self.protocols = protocols
        self.target_fqdns = target_fqdns
        self.target_urls = target_urls
        self.fqdn_tags = fqdn_tags
        self.source_ip_groups = source_ip_groups
        self.terminate_tls = terminate_tls
        self.web_categories = web_categories


class CloudError(msrest.serialization.Model):
    """An error response from the service.

    :ivar error: Cloud error body.
    :vartype error: ~network_management_client.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(
        self,
        *,
        error: Optional["CloudErrorBody"] = None,
        **kwargs
    ):
        """
        :keyword error: Cloud error body.
        :paramtype error: ~network_management_client.models.CloudErrorBody
        """
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the service.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    :ivar target: The target of the particular error. For example, the name of the property in
     error.
    :vartype target: str
    :ivar details: A list of additional details about the error.
    :vartype details: list[~network_management_client.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["CloudErrorBody"]] = None,
        **kwargs
    ):
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for display in a user
         interface.
        :paramtype message: str
        :keyword target: The target of the particular error. For example, the name of the property in
         error.
        :paramtype target: str
        :keyword details: A list of additional details about the error.
        :paramtype details: list[~network_management_client.models.CloudErrorBody]
        """
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties(msrest.serialization.Model):
    """Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client id of user assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class DnsSettings(msrest.serialization.Model):
    """DNS Proxy Settings in Firewall Policy.

    :ivar servers: List of Custom DNS Servers.
    :vartype servers: list[str]
    :ivar enable_proxy: Enable DNS Proxy on Firewalls attached to the Firewall Policy.
    :vartype enable_proxy: bool
    :ivar require_proxy_for_network_rules: FQDNs in Network Rules are supported when set to true.
    :vartype require_proxy_for_network_rules: bool
    """

    _attribute_map = {
        'servers': {'key': 'servers', 'type': '[str]'},
        'enable_proxy': {'key': 'enableProxy', 'type': 'bool'},
        'require_proxy_for_network_rules': {'key': 'requireProxyForNetworkRules', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        servers: Optional[List[str]] = None,
        enable_proxy: Optional[bool] = None,
        require_proxy_for_network_rules: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword servers: List of Custom DNS Servers.
        :paramtype servers: list[str]
        :keyword enable_proxy: Enable DNS Proxy on Firewalls attached to the Firewall Policy.
        :paramtype enable_proxy: bool
        :keyword require_proxy_for_network_rules: FQDNs in Network Rules are supported when set to
         true.
        :paramtype require_proxy_for_network_rules: bool
        """
        super(DnsSettings, self).__init__(**kwargs)
        self.servers = servers
        self.enable_proxy = enable_proxy
        self.require_proxy_for_network_rules = require_proxy_for_network_rules


class ExplicitProxySettings(msrest.serialization.Model):
    """Explicit Proxy Settings in Firewall Policy.

    :ivar enable_explicit_proxy: When set to true, explicit proxy mode is enabled.
    :vartype enable_explicit_proxy: bool
    :ivar http_port: Port number for explicit proxy http protocol, cannot be greater than 64000.
    :vartype http_port: int
    :ivar https_port: Port number for explicit proxy https protocol, cannot be greater than 64000.
    :vartype https_port: int
    :ivar pac_file_port: Port number for firewall to serve PAC file.
    :vartype pac_file_port: int
    :ivar pac_file: SAS URL for PAC file.
    :vartype pac_file: str
    """

    _validation = {
        'http_port': {'maximum': 64000, 'minimum': 0},
        'https_port': {'maximum': 64000, 'minimum': 0},
        'pac_file_port': {'maximum': 64000, 'minimum': 0},
    }

    _attribute_map = {
        'enable_explicit_proxy': {'key': 'enableExplicitProxy', 'type': 'bool'},
        'http_port': {'key': 'httpPort', 'type': 'int'},
        'https_port': {'key': 'httpsPort', 'type': 'int'},
        'pac_file_port': {'key': 'pacFilePort', 'type': 'int'},
        'pac_file': {'key': 'pacFile', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enable_explicit_proxy: Optional[bool] = None,
        http_port: Optional[int] = None,
        https_port: Optional[int] = None,
        pac_file_port: Optional[int] = None,
        pac_file: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword enable_explicit_proxy: When set to true, explicit proxy mode is enabled.
        :paramtype enable_explicit_proxy: bool
        :keyword http_port: Port number for explicit proxy http protocol, cannot be greater than 64000.
        :paramtype http_port: int
        :keyword https_port: Port number for explicit proxy https protocol, cannot be greater than
         64000.
        :paramtype https_port: int
        :keyword pac_file_port: Port number for firewall to serve PAC file.
        :paramtype pac_file_port: int
        :keyword pac_file: SAS URL for PAC file.
        :paramtype pac_file: str
        """
        super(ExplicitProxySettings, self).__init__(**kwargs)
        self.enable_explicit_proxy = enable_explicit_proxy
        self.http_port = http_port
        self.https_port = https_port
        self.pac_file_port = pac_file_port
        self.pac_file = pac_file


class FilterItems(msrest.serialization.Model):
    """Will contain the filter name and values to operate on.

    :ivar field: The name of the field we would like to filter.
    :vartype field: str
    :ivar values: List of values to filter the current field by.
    :vartype values: list[str]
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        field: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword field: The name of the field we would like to filter.
        :paramtype field: str
        :keyword values: List of values to filter the current field by.
        :paramtype values: list[str]
        """
        super(FilterItems, self).__init__(**kwargs)
        self.field = field
        self.values = values


class Resource(msrest.serialization.Model):
    """Common resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(Resource, self).__init__(**kwargs)
        self.id = id
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class FirewallPolicy(Resource):
    """FirewallPolicy Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar identity: The identity of the firewall policy.
    :vartype identity: ~network_management_client.models.ManagedServiceIdentity
    :ivar rule_collection_groups: List of references to FirewallPolicyRuleCollectionGroups.
    :vartype rule_collection_groups: list[~network_management_client.models.SubResource]
    :ivar provisioning_state: The provisioning state of the firewall policy resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~network_management_client.models.ProvisioningState
    :ivar base_policy: The parent firewall policy from which rules are inherited.
    :vartype base_policy: ~network_management_client.models.SubResource
    :ivar firewalls: List of references to Azure Firewalls that this Firewall Policy is associated
     with.
    :vartype firewalls: list[~network_management_client.models.SubResource]
    :ivar child_policies: List of references to Child Firewall Policies.
    :vartype child_policies: list[~network_management_client.models.SubResource]
    :ivar threat_intel_mode: The operation mode for Threat Intelligence. Possible values include:
     "Alert", "Deny", "Off".
    :vartype threat_intel_mode: str or
     ~network_management_client.models.AzureFirewallThreatIntelMode
    :ivar threat_intel_whitelist: ThreatIntel Whitelist for Firewall Policy.
    :vartype threat_intel_whitelist:
     ~network_management_client.models.FirewallPolicyThreatIntelWhitelist
    :ivar insights: Insights on Firewall Policy.
    :vartype insights: ~network_management_client.models.FirewallPolicyInsights
    :ivar snat: The private IP addresses/IP ranges to which traffic will not be SNAT.
    :vartype snat: ~network_management_client.models.FirewallPolicySNAT
    :ivar sql: SQL Settings definition.
    :vartype sql: ~network_management_client.models.FirewallPolicySQL
    :ivar dns_settings: DNS Proxy Settings definition.
    :vartype dns_settings: ~network_management_client.models.DnsSettings
    :ivar explicit_proxy_settings: Explicit Proxy Settings definition.
    :vartype explicit_proxy_settings: ~network_management_client.models.ExplicitProxySettings
    :ivar intrusion_detection: The configuration for Intrusion detection.
    :vartype intrusion_detection:
     ~network_management_client.models.FirewallPolicyIntrusionDetection
    :ivar transport_security: TLS Configuration definition.
    :vartype transport_security: ~network_management_client.models.FirewallPolicyTransportSecurity
    :ivar sku: The Firewall Policy SKU.
    :vartype sku: ~network_management_client.models.FirewallPolicySku
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'rule_collection_groups': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'firewalls': {'readonly': True},
        'child_policies': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'rule_collection_groups': {'key': 'properties.ruleCollectionGroups', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'base_policy': {'key': 'properties.basePolicy', 'type': 'SubResource'},
        'firewalls': {'key': 'properties.firewalls', 'type': '[SubResource]'},
        'child_policies': {'key': 'properties.childPolicies', 'type': '[SubResource]'},
        'threat_intel_mode': {'key': 'properties.threatIntelMode', 'type': 'str'},
        'threat_intel_whitelist': {'key': 'properties.threatIntelWhitelist', 'type': 'FirewallPolicyThreatIntelWhitelist'},
        'insights': {'key': 'properties.insights', 'type': 'FirewallPolicyInsights'},
        'snat': {'key': 'properties.snat', 'type': 'FirewallPolicySNAT'},
        'sql': {'key': 'properties.sql', 'type': 'FirewallPolicySQL'},
        'dns_settings': {'key': 'properties.dnsSettings', 'type': 'DnsSettings'},
        'explicit_proxy_settings': {'key': 'properties.explicitProxySettings', 'type': 'ExplicitProxySettings'},
        'intrusion_detection': {'key': 'properties.intrusionDetection', 'type': 'FirewallPolicyIntrusionDetection'},
        'transport_security': {'key': 'properties.transportSecurity', 'type': 'FirewallPolicyTransportSecurity'},
        'sku': {'key': 'properties.sku', 'type': 'FirewallPolicySku'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        base_policy: Optional["SubResource"] = None,
        threat_intel_mode: Optional[Union[str, "AzureFirewallThreatIntelMode"]] = None,
        threat_intel_whitelist: Optional["FirewallPolicyThreatIntelWhitelist"] = None,
        insights: Optional["FirewallPolicyInsights"] = None,
        snat: Optional["FirewallPolicySNAT"] = None,
        sql: Optional["FirewallPolicySQL"] = None,
        dns_settings: Optional["DnsSettings"] = None,
        explicit_proxy_settings: Optional["ExplicitProxySettings"] = None,
        intrusion_detection: Optional["FirewallPolicyIntrusionDetection"] = None,
        transport_security: Optional["FirewallPolicyTransportSecurity"] = None,
        sku: Optional["FirewallPolicySku"] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword location: Resource location.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: The identity of the firewall policy.
        :paramtype identity: ~network_management_client.models.ManagedServiceIdentity
        :keyword base_policy: The parent firewall policy from which rules are inherited.
        :paramtype base_policy: ~network_management_client.models.SubResource
        :keyword threat_intel_mode: The operation mode for Threat Intelligence. Possible values
         include: "Alert", "Deny", "Off".
        :paramtype threat_intel_mode: str or
         ~network_management_client.models.AzureFirewallThreatIntelMode
        :keyword threat_intel_whitelist: ThreatIntel Whitelist for Firewall Policy.
        :paramtype threat_intel_whitelist:
         ~network_management_client.models.FirewallPolicyThreatIntelWhitelist
        :keyword insights: Insights on Firewall Policy.
        :paramtype insights: ~network_management_client.models.FirewallPolicyInsights
        :keyword snat: The private IP addresses/IP ranges to which traffic will not be SNAT.
        :paramtype snat: ~network_management_client.models.FirewallPolicySNAT
        :keyword sql: SQL Settings definition.
        :paramtype sql: ~network_management_client.models.FirewallPolicySQL
        :keyword dns_settings: DNS Proxy Settings definition.
        :paramtype dns_settings: ~network_management_client.models.DnsSettings
        :keyword explicit_proxy_settings: Explicit Proxy Settings definition.
        :paramtype explicit_proxy_settings: ~network_management_client.models.ExplicitProxySettings
        :keyword intrusion_detection: The configuration for Intrusion detection.
        :paramtype intrusion_detection:
         ~network_management_client.models.FirewallPolicyIntrusionDetection
        :keyword transport_security: TLS Configuration definition.
        :paramtype transport_security:
         ~network_management_client.models.FirewallPolicyTransportSecurity
        :keyword sku: The Firewall Policy SKU.
        :paramtype sku: ~network_management_client.models.FirewallPolicySku
        """
        super(FirewallPolicy, self).__init__(id=id, location=location, tags=tags, **kwargs)
        self.etag = None
        self.identity = identity
        self.rule_collection_groups = None
        self.provisioning_state = None
        self.base_policy = base_policy
        self.firewalls = None
        self.child_policies = None
        self.threat_intel_mode = threat_intel_mode
        self.threat_intel_whitelist = threat_intel_whitelist
        self.insights = insights
        self.snat = snat
        self.sql = sql
        self.dns_settings = dns_settings
        self.explicit_proxy_settings = explicit_proxy_settings
        self.intrusion_detection = intrusion_detection
        self.transport_security = transport_security
        self.sku = sku


class FirewallPolicyCertificateAuthority(msrest.serialization.Model):
    """Trusted Root certificates properties for tls.

    :ivar key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
     'Certificate' object stored in KeyVault.
    :vartype key_vault_secret_id: str
    :ivar name: Name of the CA certificate.
    :vartype name: str
    """

    _attribute_map = {
        'key_vault_secret_id': {'key': 'keyVaultSecretId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key_vault_secret_id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword key_vault_secret_id: Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or
         'Certificate' object stored in KeyVault.
        :paramtype key_vault_secret_id: str
        :keyword name: Name of the CA certificate.
        :paramtype name: str
        """
        super(FirewallPolicyCertificateAuthority, self).__init__(**kwargs)
        self.key_vault_secret_id = key_vault_secret_id
        self.name = name


class FirewallPolicyRuleCollection(msrest.serialization.Model):
    """Properties of the rule collection.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FirewallPolicyFilterRuleCollection, FirewallPolicyNatRuleCollection.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_collection_type: Required. The type of the rule collection.Constant filled by
     server. Possible values include: "FirewallPolicyNatRuleCollection",
     "FirewallPolicyFilterRuleCollection".
    :vartype rule_collection_type: str or
     ~network_management_client.models.FirewallPolicyRuleCollectionType
    :ivar name: The name of the rule collection.
    :vartype name: str
    :ivar priority: Priority of the Firewall Policy Rule Collection resource.
    :vartype priority: int
    """

    _validation = {
        'rule_collection_type': {'required': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'rule_collection_type': {'key': 'ruleCollectionType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
    }

    _subtype_map = {
        'rule_collection_type': {'FirewallPolicyFilterRuleCollection': 'FirewallPolicyFilterRuleCollection', 'FirewallPolicyNatRuleCollection': 'FirewallPolicyNatRuleCollection'}
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the rule collection.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection resource.
        :paramtype priority: int
        """
        super(FirewallPolicyRuleCollection, self).__init__(**kwargs)
        self.rule_collection_type = None  # type: Optional[str]
        self.name = name
        self.priority = priority


class FirewallPolicyFilterRuleCollection(FirewallPolicyRuleCollection):
    """Firewall Policy Filter Rule Collection.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_collection_type: Required. The type of the rule collection.Constant filled by
     server. Possible values include: "FirewallPolicyNatRuleCollection",
     "FirewallPolicyFilterRuleCollection".
    :vartype rule_collection_type: str or
     ~network_management_client.models.FirewallPolicyRuleCollectionType
    :ivar name: The name of the rule collection.
    :vartype name: str
    :ivar priority: Priority of the Firewall Policy Rule Collection resource.
    :vartype priority: int
    :ivar action: The action type of a Filter rule collection.
    :vartype action: ~network_management_client.models.FirewallPolicyFilterRuleCollectionAction
    :ivar rules: List of rules included in a rule collection.
    :vartype rules: list[~network_management_client.models.FirewallPolicyRule]
    """

    _validation = {
        'rule_collection_type': {'required': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'rule_collection_type': {'key': 'ruleCollectionType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'action': {'key': 'action', 'type': 'FirewallPolicyFilterRuleCollectionAction'},
        'rules': {'key': 'rules', 'type': '[FirewallPolicyRule]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        action: Optional["FirewallPolicyFilterRuleCollectionAction"] = None,
        rules: Optional[List["FirewallPolicyRule"]] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the rule collection.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection resource.
        :paramtype priority: int
        :keyword action: The action type of a Filter rule collection.
        :paramtype action: ~network_management_client.models.FirewallPolicyFilterRuleCollectionAction
        :keyword rules: List of rules included in a rule collection.
        :paramtype rules: list[~network_management_client.models.FirewallPolicyRule]
        """
        super(FirewallPolicyFilterRuleCollection, self).__init__(name=name, priority=priority, **kwargs)
        self.rule_collection_type = 'FirewallPolicyFilterRuleCollection'  # type: str
        self.action = action
        self.rules = rules


class FirewallPolicyFilterRuleCollectionAction(msrest.serialization.Model):
    """Properties of the FirewallPolicyFilterRuleCollectionAction.

    :ivar type: The type of action. Possible values include: "Allow", "Deny".
    :vartype type: str or
     ~network_management_client.models.FirewallPolicyFilterRuleCollectionActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "FirewallPolicyFilterRuleCollectionActionType"]] = None,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "Allow", "Deny".
        :paramtype type: str or
         ~network_management_client.models.FirewallPolicyFilterRuleCollectionActionType
        """
        super(FirewallPolicyFilterRuleCollectionAction, self).__init__(**kwargs)
        self.type = type


class FirewallPolicyInsights(msrest.serialization.Model):
    """Firewall Policy Insights.

    :ivar is_enabled: A flag to indicate if the insights are enabled on the policy.
    :vartype is_enabled: bool
    :ivar retention_days: Number of days the insights should be enabled on the policy.
    :vartype retention_days: int
    :ivar log_analytics_resources: Workspaces needed to configure the Firewall Policy Insights.
    :vartype log_analytics_resources:
     ~network_management_client.models.FirewallPolicyLogAnalyticsResources
    """

    _attribute_map = {
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'retention_days': {'key': 'retentionDays', 'type': 'int'},
        'log_analytics_resources': {'key': 'logAnalyticsResources', 'type': 'FirewallPolicyLogAnalyticsResources'},
    }

    def __init__(
        self,
        *,
        is_enabled: Optional[bool] = None,
        retention_days: Optional[int] = None,
        log_analytics_resources: Optional["FirewallPolicyLogAnalyticsResources"] = None,
        **kwargs
    ):
        """
        :keyword is_enabled: A flag to indicate if the insights are enabled on the policy.
        :paramtype is_enabled: bool
        :keyword retention_days: Number of days the insights should be enabled on the policy.
        :paramtype retention_days: int
        :keyword log_analytics_resources: Workspaces needed to configure the Firewall Policy Insights.
        :paramtype log_analytics_resources:
         ~network_management_client.models.FirewallPolicyLogAnalyticsResources
        """
        super(FirewallPolicyInsights, self).__init__(**kwargs)
        self.is_enabled = is_enabled
        self.retention_days = retention_days
        self.log_analytics_resources = log_analytics_resources


class FirewallPolicyIntrusionDetection(msrest.serialization.Model):
    """Configuration for intrusion detection mode and rules.

    :ivar mode: Intrusion detection general state. Possible values include: "Off", "Alert", "Deny".
    :vartype mode: str or
     ~network_management_client.models.FirewallPolicyIntrusionDetectionStateType
    :ivar configuration: Intrusion detection configuration properties.
    :vartype configuration:
     ~network_management_client.models.FirewallPolicyIntrusionDetectionConfiguration
    """

    _attribute_map = {
        'mode': {'key': 'mode', 'type': 'str'},
        'configuration': {'key': 'configuration', 'type': 'FirewallPolicyIntrusionDetectionConfiguration'},
    }

    def __init__(
        self,
        *,
        mode: Optional[Union[str, "FirewallPolicyIntrusionDetectionStateType"]] = None,
        configuration: Optional["FirewallPolicyIntrusionDetectionConfiguration"] = None,
        **kwargs
    ):
        """
        :keyword mode: Intrusion detection general state. Possible values include: "Off", "Alert",
         "Deny".
        :paramtype mode: str or
         ~network_management_client.models.FirewallPolicyIntrusionDetectionStateType
        :keyword configuration: Intrusion detection configuration properties.
        :paramtype configuration:
         ~network_management_client.models.FirewallPolicyIntrusionDetectionConfiguration
        """
        super(FirewallPolicyIntrusionDetection, self).__init__(**kwargs)
        self.mode = mode
        self.configuration = configuration


class FirewallPolicyIntrusionDetectionBypassTrafficSpecifications(msrest.serialization.Model):
    """Intrusion detection bypass traffic specification.

    :ivar name: Name of the bypass traffic rule.
    :vartype name: str
    :ivar description: Description of the bypass traffic rule.
    :vartype description: str
    :ivar protocol: The rule bypass protocol. Possible values include: "TCP", "UDP", "ICMP", "ANY".
    :vartype protocol: str or
     ~network_management_client.models.FirewallPolicyIntrusionDetectionProtocol
    :ivar source_addresses: List of source IP addresses or ranges for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or ranges for this rule.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports or ranges.
    :vartype destination_ports: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar destination_ip_groups: List of destination IpGroups for this rule.
    :vartype destination_ip_groups: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'destination_ip_groups': {'key': 'destinationIpGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        protocol: Optional[Union[str, "FirewallPolicyIntrusionDetectionProtocol"]] = None,
        source_addresses: Optional[List[str]] = None,
        destination_addresses: Optional[List[str]] = None,
        destination_ports: Optional[List[str]] = None,
        source_ip_groups: Optional[List[str]] = None,
        destination_ip_groups: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the bypass traffic rule.
        :paramtype name: str
        :keyword description: Description of the bypass traffic rule.
        :paramtype description: str
        :keyword protocol: The rule bypass protocol. Possible values include: "TCP", "UDP", "ICMP",
         "ANY".
        :paramtype protocol: str or
         ~network_management_client.models.FirewallPolicyIntrusionDetectionProtocol
        :keyword source_addresses: List of source IP addresses or ranges for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or ranges for this rule.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports or ranges.
        :paramtype destination_ports: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword destination_ip_groups: List of destination IpGroups for this rule.
        :paramtype destination_ip_groups: list[str]
        """
        super(FirewallPolicyIntrusionDetectionBypassTrafficSpecifications, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.protocol = protocol
        self.source_addresses = source_addresses
        self.destination_addresses = destination_addresses
        self.destination_ports = destination_ports
        self.source_ip_groups = source_ip_groups
        self.destination_ip_groups = destination_ip_groups


class FirewallPolicyIntrusionDetectionConfiguration(msrest.serialization.Model):
    """The operation for configuring intrusion detection.

    :ivar signature_overrides: List of specific signatures states.
    :vartype signature_overrides:
     list[~network_management_client.models.FirewallPolicyIntrusionDetectionSignatureSpecification]
    :ivar bypass_traffic_settings: List of rules for traffic to bypass.
    :vartype bypass_traffic_settings:
     list[~network_management_client.models.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications]
    """

    _attribute_map = {
        'signature_overrides': {'key': 'signatureOverrides', 'type': '[FirewallPolicyIntrusionDetectionSignatureSpecification]'},
        'bypass_traffic_settings': {'key': 'bypassTrafficSettings', 'type': '[FirewallPolicyIntrusionDetectionBypassTrafficSpecifications]'},
    }

    def __init__(
        self,
        *,
        signature_overrides: Optional[List["FirewallPolicyIntrusionDetectionSignatureSpecification"]] = None,
        bypass_traffic_settings: Optional[List["FirewallPolicyIntrusionDetectionBypassTrafficSpecifications"]] = None,
        **kwargs
    ):
        """
        :keyword signature_overrides: List of specific signatures states.
        :paramtype signature_overrides:
         list[~network_management_client.models.FirewallPolicyIntrusionDetectionSignatureSpecification]
        :keyword bypass_traffic_settings: List of rules for traffic to bypass.
        :paramtype bypass_traffic_settings:
         list[~network_management_client.models.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications]
        """
        super(FirewallPolicyIntrusionDetectionConfiguration, self).__init__(**kwargs)
        self.signature_overrides = signature_overrides
        self.bypass_traffic_settings = bypass_traffic_settings


class FirewallPolicyIntrusionDetectionSignatureSpecification(msrest.serialization.Model):
    """Intrusion detection signatures specification states.

    :ivar id: Signature id.
    :vartype id: str
    :ivar mode: The signature state. Possible values include: "Off", "Alert", "Deny".
    :vartype mode: str or
     ~network_management_client.models.FirewallPolicyIntrusionDetectionStateType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'mode': {'key': 'mode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        mode: Optional[Union[str, "FirewallPolicyIntrusionDetectionStateType"]] = None,
        **kwargs
    ):
        """
        :keyword id: Signature id.
        :paramtype id: str
        :keyword mode: The signature state. Possible values include: "Off", "Alert", "Deny".
        :paramtype mode: str or
         ~network_management_client.models.FirewallPolicyIntrusionDetectionStateType
        """
        super(FirewallPolicyIntrusionDetectionSignatureSpecification, self).__init__(**kwargs)
        self.id = id
        self.mode = mode


class FirewallPolicyListResult(msrest.serialization.Model):
    """Response for ListFirewallPolicies API service call.

    :ivar value: List of Firewall Policies in a resource group.
    :vartype value: list[~network_management_client.models.FirewallPolicy]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FirewallPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["FirewallPolicy"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: List of Firewall Policies in a resource group.
        :paramtype value: list[~network_management_client.models.FirewallPolicy]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(FirewallPolicyListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FirewallPolicyLogAnalyticsResources(msrest.serialization.Model):
    """Log Analytics Resources for Firewall Policy Insights.

    :ivar workspaces: List of workspaces for Firewall Policy Insights.
    :vartype workspaces:
     list[~network_management_client.models.FirewallPolicyLogAnalyticsWorkspace]
    :ivar default_workspace_id: The default workspace Id for Firewall Policy Insights.
    :vartype default_workspace_id: ~network_management_client.models.SubResource
    """

    _attribute_map = {
        'workspaces': {'key': 'workspaces', 'type': '[FirewallPolicyLogAnalyticsWorkspace]'},
        'default_workspace_id': {'key': 'defaultWorkspaceId', 'type': 'SubResource'},
    }

    def __init__(
        self,
        *,
        workspaces: Optional[List["FirewallPolicyLogAnalyticsWorkspace"]] = None,
        default_workspace_id: Optional["SubResource"] = None,
        **kwargs
    ):
        """
        :keyword workspaces: List of workspaces for Firewall Policy Insights.
        :paramtype workspaces:
         list[~network_management_client.models.FirewallPolicyLogAnalyticsWorkspace]
        :keyword default_workspace_id: The default workspace Id for Firewall Policy Insights.
        :paramtype default_workspace_id: ~network_management_client.models.SubResource
        """
        super(FirewallPolicyLogAnalyticsResources, self).__init__(**kwargs)
        self.workspaces = workspaces
        self.default_workspace_id = default_workspace_id


class FirewallPolicyLogAnalyticsWorkspace(msrest.serialization.Model):
    """Log Analytics Workspace for Firewall Policy Insights.

    :ivar region: Region to configure the Workspace.
    :vartype region: str
    :ivar workspace_id: The workspace Id for Firewall Policy Insights.
    :vartype workspace_id: ~network_management_client.models.SubResource
    """

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'workspace_id': {'key': 'workspaceId', 'type': 'SubResource'},
    }

    def __init__(
        self,
        *,
        region: Optional[str] = None,
        workspace_id: Optional["SubResource"] = None,
        **kwargs
    ):
        """
        :keyword region: Region to configure the Workspace.
        :paramtype region: str
        :keyword workspace_id: The workspace Id for Firewall Policy Insights.
        :paramtype workspace_id: ~network_management_client.models.SubResource
        """
        super(FirewallPolicyLogAnalyticsWorkspace, self).__init__(**kwargs)
        self.region = region
        self.workspace_id = workspace_id


class FirewallPolicyNatRuleCollection(FirewallPolicyRuleCollection):
    """Firewall Policy NAT Rule Collection.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_collection_type: Required. The type of the rule collection.Constant filled by
     server. Possible values include: "FirewallPolicyNatRuleCollection",
     "FirewallPolicyFilterRuleCollection".
    :vartype rule_collection_type: str or
     ~network_management_client.models.FirewallPolicyRuleCollectionType
    :ivar name: The name of the rule collection.
    :vartype name: str
    :ivar priority: Priority of the Firewall Policy Rule Collection resource.
    :vartype priority: int
    :ivar action: The action type of a Nat rule collection.
    :vartype action: ~network_management_client.models.FirewallPolicyNatRuleCollectionAction
    :ivar rules: List of rules included in a rule collection.
    :vartype rules: list[~network_management_client.models.FirewallPolicyRule]
    """

    _validation = {
        'rule_collection_type': {'required': True},
        'priority': {'maximum': 65000, 'minimum': 100},
    }

    _attribute_map = {
        'rule_collection_type': {'key': 'ruleCollectionType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'action': {'key': 'action', 'type': 'FirewallPolicyNatRuleCollectionAction'},
        'rules': {'key': 'rules', 'type': '[FirewallPolicyRule]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        action: Optional["FirewallPolicyNatRuleCollectionAction"] = None,
        rules: Optional[List["FirewallPolicyRule"]] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the rule collection.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection resource.
        :paramtype priority: int
        :keyword action: The action type of a Nat rule collection.
        :paramtype action: ~network_management_client.models.FirewallPolicyNatRuleCollectionAction
        :keyword rules: List of rules included in a rule collection.
        :paramtype rules: list[~network_management_client.models.FirewallPolicyRule]
        """
        super(FirewallPolicyNatRuleCollection, self).__init__(name=name, priority=priority, **kwargs)
        self.rule_collection_type = 'FirewallPolicyNatRuleCollection'  # type: str
        self.action = action
        self.rules = rules


class FirewallPolicyNatRuleCollectionAction(msrest.serialization.Model):
    """Properties of the FirewallPolicyNatRuleCollectionAction.

    :ivar type: The type of action. Possible values include: "DNAT".
    :vartype type: str or
     ~network_management_client.models.FirewallPolicyNatRuleCollectionActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "FirewallPolicyNatRuleCollectionActionType"]] = None,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "DNAT".
        :paramtype type: str or
         ~network_management_client.models.FirewallPolicyNatRuleCollectionActionType
        """
        super(FirewallPolicyNatRuleCollectionAction, self).__init__(**kwargs)
        self.type = type


class FirewallPolicyRuleApplicationProtocol(msrest.serialization.Model):
    """Properties of the application rule protocol.

    :ivar protocol_type: Protocol type. Possible values include: "Http", "Https".
    :vartype protocol_type: str or
     ~network_management_client.models.FirewallPolicyRuleApplicationProtocolType
    :ivar port: Port number for the protocol, cannot be greater than 64000.
    :vartype port: int
    """

    _validation = {
        'port': {'maximum': 64000, 'minimum': 0},
    }

    _attribute_map = {
        'protocol_type': {'key': 'protocolType', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        protocol_type: Optional[Union[str, "FirewallPolicyRuleApplicationProtocolType"]] = None,
        port: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword protocol_type: Protocol type. Possible values include: "Http", "Https".
        :paramtype protocol_type: str or
         ~network_management_client.models.FirewallPolicyRuleApplicationProtocolType
        :keyword port: Port number for the protocol, cannot be greater than 64000.
        :paramtype port: int
        """
        super(FirewallPolicyRuleApplicationProtocol, self).__init__(**kwargs)
        self.protocol_type = protocol_type
        self.port = port


class SubResource(msrest.serialization.Model):
    """Reference to another subresource.

    :ivar id: Resource ID.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        """
        super(SubResource, self).__init__(**kwargs)
        self.id = id


class FirewallPolicyRuleCollectionGroup(SubResource):
    """Rule Collection Group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: The name of the resource that is unique within a resource group. This name can be
     used to access the resource.
    :vartype name: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar type: Rule Group type.
    :vartype type: str
    :ivar priority: Priority of the Firewall Policy Rule Collection Group resource.
    :vartype priority: int
    :ivar rule_collections: Group of Firewall Policy rule collections.
    :vartype rule_collections: list[~network_management_client.models.FirewallPolicyRuleCollection]
    :ivar provisioning_state: The provisioning state of the firewall policy rule collection group
     resource. Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or ~network_management_client.models.ProvisioningState
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'readonly': True},
        'priority': {'maximum': 65000, 'minimum': 100},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'rule_collections': {'key': 'properties.ruleCollections', 'type': '[FirewallPolicyRuleCollection]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional[str] = None,
        priority: Optional[int] = None,
        rule_collections: Optional[List["FirewallPolicyRuleCollection"]] = None,
        **kwargs
    ):
        """
        :keyword id: Resource ID.
        :paramtype id: str
        :keyword name: The name of the resource that is unique within a resource group. This name can
         be used to access the resource.
        :paramtype name: str
        :keyword priority: Priority of the Firewall Policy Rule Collection Group resource.
        :paramtype priority: int
        :keyword rule_collections: Group of Firewall Policy rule collections.
        :paramtype rule_collections:
         list[~network_management_client.models.FirewallPolicyRuleCollection]
        """
        super(FirewallPolicyRuleCollectionGroup, self).__init__(id=id, **kwargs)
        self.name = name
        self.etag = None
        self.type = None
        self.priority = priority
        self.rule_collections = rule_collections
        self.provisioning_state = None


class FirewallPolicyRuleCollectionGroupListResult(msrest.serialization.Model):
    """Response for ListFirewallPolicyRuleCollectionGroups API service call.

    :ivar value: List of FirewallPolicyRuleCollectionGroups in a FirewallPolicy.
    :vartype value: list[~network_management_client.models.FirewallPolicyRuleCollectionGroup]
    :ivar next_link: URL to get the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FirewallPolicyRuleCollectionGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["FirewallPolicyRuleCollectionGroup"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: List of FirewallPolicyRuleCollectionGroups in a FirewallPolicy.
        :paramtype value: list[~network_management_client.models.FirewallPolicyRuleCollectionGroup]
        :keyword next_link: URL to get the next set of results.
        :paramtype next_link: str
        """
        super(FirewallPolicyRuleCollectionGroupListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FirewallPolicySku(msrest.serialization.Model):
    """SKU of Firewall policy.

    :ivar tier: Tier of Firewall Policy. Possible values include: "Standard", "Premium", "Basic".
    :vartype tier: str or ~network_management_client.models.FirewallPolicySkuTier
    """

    _attribute_map = {
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tier: Optional[Union[str, "FirewallPolicySkuTier"]] = None,
        **kwargs
    ):
        """
        :keyword tier: Tier of Firewall Policy. Possible values include: "Standard", "Premium",
         "Basic".
        :paramtype tier: str or ~network_management_client.models.FirewallPolicySkuTier
        """
        super(FirewallPolicySku, self).__init__(**kwargs)
        self.tier = tier


class FirewallPolicySNAT(msrest.serialization.Model):
    """The private IP addresses/IP ranges to which traffic will not be SNAT.

    :ivar private_ranges: List of private IP addresses/IP address ranges to not be SNAT.
    :vartype private_ranges: list[str]
    """

    _attribute_map = {
        'private_ranges': {'key': 'privateRanges', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        private_ranges: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword private_ranges: List of private IP addresses/IP address ranges to not be SNAT.
        :paramtype private_ranges: list[str]
        """
        super(FirewallPolicySNAT, self).__init__(**kwargs)
        self.private_ranges = private_ranges


class FirewallPolicySQL(msrest.serialization.Model):
    """SQL Settings in Firewall Policy.

    :ivar allow_sql_redirect: A flag to indicate if SQL Redirect traffic filtering is enabled.
     Turning on the flag requires no rule using port 11000-11999.
    :vartype allow_sql_redirect: bool
    """

    _attribute_map = {
        'allow_sql_redirect': {'key': 'allowSqlRedirect', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        allow_sql_redirect: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword allow_sql_redirect: A flag to indicate if SQL Redirect traffic filtering is enabled.
         Turning on the flag requires no rule using port 11000-11999.
        :paramtype allow_sql_redirect: bool
        """
        super(FirewallPolicySQL, self).__init__(**kwargs)
        self.allow_sql_redirect = allow_sql_redirect


class FirewallPolicyThreatIntelWhitelist(msrest.serialization.Model):
    """ThreatIntel Whitelist for Firewall Policy.

    :ivar ip_addresses: List of IP addresses for the ThreatIntel Whitelist.
    :vartype ip_addresses: list[str]
    :ivar fqdns: List of FQDNs for the ThreatIntel Whitelist.
    :vartype fqdns: list[str]
    """

    _attribute_map = {
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'fqdns': {'key': 'fqdns', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        ip_addresses: Optional[List[str]] = None,
        fqdns: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword ip_addresses: List of IP addresses for the ThreatIntel Whitelist.
        :paramtype ip_addresses: list[str]
        :keyword fqdns: List of FQDNs for the ThreatIntel Whitelist.
        :paramtype fqdns: list[str]
        """
        super(FirewallPolicyThreatIntelWhitelist, self).__init__(**kwargs)
        self.ip_addresses = ip_addresses
        self.fqdns = fqdns


class FirewallPolicyTransportSecurity(msrest.serialization.Model):
    """Configuration needed to perform TLS termination & initiation.

    :ivar certificate_authority: The CA used for intermediate CA generation.
    :vartype certificate_authority:
     ~network_management_client.models.FirewallPolicyCertificateAuthority
    """

    _attribute_map = {
        'certificate_authority': {'key': 'certificateAuthority', 'type': 'FirewallPolicyCertificateAuthority'},
    }

    def __init__(
        self,
        *,
        certificate_authority: Optional["FirewallPolicyCertificateAuthority"] = None,
        **kwargs
    ):
        """
        :keyword certificate_authority: The CA used for intermediate CA generation.
        :paramtype certificate_authority:
         ~network_management_client.models.FirewallPolicyCertificateAuthority
        """
        super(FirewallPolicyTransportSecurity, self).__init__(**kwargs)
        self.certificate_authority = certificate_authority


class IDPSQueryObject(msrest.serialization.Model):
    """Will describe the query to run against the IDPS signatures DB.

    :ivar filters: Contain all filters names and values.
    :vartype filters: list[~network_management_client.models.FilterItems]
    :ivar search: Search term in all columns.
    :vartype search: str
    :ivar order_by: Column to sort response by.
    :vartype order_by: ~network_management_client.models.OrderBy
    :ivar results_per_page: The number of the results to return in each page.
    :vartype results_per_page: int
    :ivar skip: The number of records matching the filter to skip.
    :vartype skip: int
    """

    _validation = {
        'results_per_page': {'maximum': 1000, 'minimum': 1},
    }

    _attribute_map = {
        'filters': {'key': 'filters', 'type': '[FilterItems]'},
        'search': {'key': 'search', 'type': 'str'},
        'order_by': {'key': 'orderBy', 'type': 'OrderBy'},
        'results_per_page': {'key': 'resultsPerPage', 'type': 'int'},
        'skip': {'key': 'skip', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        filters: Optional[List["FilterItems"]] = None,
        search: Optional[str] = None,
        order_by: Optional["OrderBy"] = None,
        results_per_page: Optional[int] = None,
        skip: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword filters: Contain all filters names and values.
        :paramtype filters: list[~network_management_client.models.FilterItems]
        :keyword search: Search term in all columns.
        :paramtype search: str
        :keyword order_by: Column to sort response by.
        :paramtype order_by: ~network_management_client.models.OrderBy
        :keyword results_per_page: The number of the results to return in each page.
        :paramtype results_per_page: int
        :keyword skip: The number of records matching the filter to skip.
        :paramtype skip: int
        """
        super(IDPSQueryObject, self).__init__(**kwargs)
        self.filters = filters
        self.search = search
        self.order_by = order_by
        self.results_per_page = results_per_page
        self.skip = skip


class ManagedServiceIdentity(msrest.serialization.Model):
    """Identity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of the system assigned identity. This property will only
     be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of identity used for the resource. The type 'SystemAssigned, UserAssigned'
     includes both an implicitly created identity and a set of user assigned identities. The type
     'None' will remove any identities from the virtual machine. Possible values include:
     "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None".
    :vartype type: str or ~network_management_client.models.ResourceIdentityType
    :ivar user_assigned_identities: The list of user identities associated with resource. The user
     identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    :vartype user_assigned_identities: dict[str,
     ~network_management_client.models.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties}'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "ResourceIdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties"]] = None,
        **kwargs
    ):
        """
        :keyword type: The type of identity used for the resource. The type 'SystemAssigned,
         UserAssigned' includes both an implicitly created identity and a set of user assigned
         identities. The type 'None' will remove any identities from the virtual machine. Possible
         values include: "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None".
        :paramtype type: str or ~network_management_client.models.ResourceIdentityType
        :keyword user_assigned_identities: The list of user identities associated with resource. The
         user identity dictionary key references will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        :paramtype user_assigned_identities: dict[str,
         ~network_management_client.models.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties]
        """
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class NatRule(FirewallPolicyRule):
    """Rule of type nat.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~network_management_client.models.FirewallPolicyRuleType
    :ivar ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
    :vartype ip_protocols: list[str or
     ~network_management_client.models.FirewallPolicyRuleNetworkProtocol]
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or Service Tags.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    :ivar translated_address: The translated address for this NAT rule.
    :vartype translated_address: str
    :ivar translated_port: The translated port for this NAT rule.
    :vartype translated_port: str
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar translated_fqdn: The translated FQDN for this NAT rule.
    :vartype translated_fqdn: str
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'ip_protocols': {'key': 'ipProtocols', 'type': '[str]'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'translated_address': {'key': 'translatedAddress', 'type': 'str'},
        'translated_port': {'key': 'translatedPort', 'type': 'str'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'translated_fqdn': {'key': 'translatedFqdn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        ip_protocols: Optional[List[Union[str, "FirewallPolicyRuleNetworkProtocol"]]] = None,
        source_addresses: Optional[List[str]] = None,
        destination_addresses: Optional[List[str]] = None,
        destination_ports: Optional[List[str]] = None,
        translated_address: Optional[str] = None,
        translated_port: Optional[str] = None,
        source_ip_groups: Optional[List[str]] = None,
        translated_fqdn: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
        :paramtype ip_protocols: list[str or
         ~network_management_client.models.FirewallPolicyRuleNetworkProtocol]
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or Service Tags.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        :keyword translated_address: The translated address for this NAT rule.
        :paramtype translated_address: str
        :keyword translated_port: The translated port for this NAT rule.
        :paramtype translated_port: str
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword translated_fqdn: The translated FQDN for this NAT rule.
        :paramtype translated_fqdn: str
        """
        super(NatRule, self).__init__(name=name, description=description, **kwargs)
        self.rule_type = 'NatRule'  # type: str
        self.ip_protocols = ip_protocols
        self.source_addresses = source_addresses
        self.destination_addresses = destination_addresses
        self.destination_ports = destination_ports
        self.translated_address = translated_address
        self.translated_port = translated_port
        self.source_ip_groups = source_ip_groups
        self.translated_fqdn = translated_fqdn


class NetworkRule(FirewallPolicyRule):
    """Rule of type network.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the rule.
    :vartype name: str
    :ivar description: Description of the rule.
    :vartype description: str
    :ivar rule_type: Required. Rule Type.Constant filled by server. Possible values include:
     "ApplicationRule", "NetworkRule", "NatRule".
    :vartype rule_type: str or ~network_management_client.models.FirewallPolicyRuleType
    :ivar ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
    :vartype ip_protocols: list[str or
     ~network_management_client.models.FirewallPolicyRuleNetworkProtocol]
    :ivar source_addresses: List of source IP addresses for this rule.
    :vartype source_addresses: list[str]
    :ivar destination_addresses: List of destination IP addresses or Service Tags.
    :vartype destination_addresses: list[str]
    :ivar destination_ports: List of destination ports.
    :vartype destination_ports: list[str]
    :ivar source_ip_groups: List of source IpGroups for this rule.
    :vartype source_ip_groups: list[str]
    :ivar destination_ip_groups: List of destination IpGroups for this rule.
    :vartype destination_ip_groups: list[str]
    :ivar destination_fqdns: List of destination FQDNs.
    :vartype destination_fqdns: list[str]
    """

    _validation = {
        'rule_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'rule_type': {'key': 'ruleType', 'type': 'str'},
        'ip_protocols': {'key': 'ipProtocols', 'type': '[str]'},
        'source_addresses': {'key': 'sourceAddresses', 'type': '[str]'},
        'destination_addresses': {'key': 'destinationAddresses', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'source_ip_groups': {'key': 'sourceIpGroups', 'type': '[str]'},
        'destination_ip_groups': {'key': 'destinationIpGroups', 'type': '[str]'},
        'destination_fqdns': {'key': 'destinationFqdns', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        ip_protocols: Optional[List[Union[str, "FirewallPolicyRuleNetworkProtocol"]]] = None,
        source_addresses: Optional[List[str]] = None,
        destination_addresses: Optional[List[str]] = None,
        destination_ports: Optional[List[str]] = None,
        source_ip_groups: Optional[List[str]] = None,
        destination_ip_groups: Optional[List[str]] = None,
        destination_fqdns: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword name: Name of the rule.
        :paramtype name: str
        :keyword description: Description of the rule.
        :paramtype description: str
        :keyword ip_protocols: Array of FirewallPolicyRuleNetworkProtocols.
        :paramtype ip_protocols: list[str or
         ~network_management_client.models.FirewallPolicyRuleNetworkProtocol]
        :keyword source_addresses: List of source IP addresses for this rule.
        :paramtype source_addresses: list[str]
        :keyword destination_addresses: List of destination IP addresses or Service Tags.
        :paramtype destination_addresses: list[str]
        :keyword destination_ports: List of destination ports.
        :paramtype destination_ports: list[str]
        :keyword source_ip_groups: List of source IpGroups for this rule.
        :paramtype source_ip_groups: list[str]
        :keyword destination_ip_groups: List of destination IpGroups for this rule.
        :paramtype destination_ip_groups: list[str]
        :keyword destination_fqdns: List of destination FQDNs.
        :paramtype destination_fqdns: list[str]
        """
        super(NetworkRule, self).__init__(name=name, description=description, **kwargs)
        self.rule_type = 'NetworkRule'  # type: str
        self.ip_protocols = ip_protocols
        self.source_addresses = source_addresses
        self.destination_addresses = destination_addresses
        self.destination_ports = destination_ports
        self.source_ip_groups = source_ip_groups
        self.destination_ip_groups = destination_ip_groups
        self.destination_fqdns = destination_fqdns


class OrderBy(msrest.serialization.Model):
    """Describes a column to sort.

    :ivar field: Describes the actual column name to sort by.
    :vartype field: str
    :ivar order: Describes if results should be in ascending/descending order. Possible values
     include: "Ascending", "Descending".
    :vartype order: str or ~network_management_client.models.OrderByOrder
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'order': {'key': 'order', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        field: Optional[str] = None,
        order: Optional[Union[str, "OrderByOrder"]] = None,
        **kwargs
    ):
        """
        :keyword field: Describes the actual column name to sort by.
        :paramtype field: str
        :keyword order: Describes if results should be in ascending/descending order. Possible values
         include: "Ascending", "Descending".
        :paramtype order: str or ~network_management_client.models.OrderByOrder
        """
        super(OrderBy, self).__init__(**kwargs)
        self.field = field
        self.order = order


class QueryResults(msrest.serialization.Model):
    """Query result.

    :ivar matching_records_count: Number of total records matching the query.
    :vartype matching_records_count: long
    :ivar signatures: Array containing the results of the query.
    :vartype signatures: list[~network_management_client.models.SingleQueryResult]
    """

    _attribute_map = {
        'matching_records_count': {'key': 'matchingRecordsCount', 'type': 'long'},
        'signatures': {'key': 'signatures', 'type': '[SingleQueryResult]'},
    }

    def __init__(
        self,
        *,
        matching_records_count: Optional[int] = None,
        signatures: Optional[List["SingleQueryResult"]] = None,
        **kwargs
    ):
        """
        :keyword matching_records_count: Number of total records matching the query.
        :paramtype matching_records_count: long
        :keyword signatures: Array containing the results of the query.
        :paramtype signatures: list[~network_management_client.models.SingleQueryResult]
        """
        super(QueryResults, self).__init__(**kwargs)
        self.matching_records_count = matching_records_count
        self.signatures = signatures


class SignatureOverridesFilterValuesQuery(msrest.serialization.Model):
    """Describes the filter values possibles for a given column.

    :ivar filter_name: Describes the name of the column which values will be returned.
    :vartype filter_name: str
    """

    _attribute_map = {
        'filter_name': {'key': 'filterName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        filter_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword filter_name: Describes the name of the column which values will be returned.
        :paramtype filter_name: str
        """
        super(SignatureOverridesFilterValuesQuery, self).__init__(**kwargs)
        self.filter_name = filter_name


class SignatureOverridesFilterValuesResponse(msrest.serialization.Model):
    """Describes the list of all possible values for a specific filter value.

    :ivar filter_values: Describes the possible values.
    :vartype filter_values: list[str]
    """

    _attribute_map = {
        'filter_values': {'key': 'filterValues', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        filter_values: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword filter_values: Describes the possible values.
        :paramtype filter_values: list[str]
        """
        super(SignatureOverridesFilterValuesResponse, self).__init__(**kwargs)
        self.filter_values = filter_values


class SignaturesOverrides(msrest.serialization.Model):
    """Contains all specific policy signatures overrides for the IDPS.

    :ivar name: Contains the name of the resource (default).
    :vartype name: str
    :ivar id: Will contain the resource id of the signature override resource.
    :vartype id: str
    :ivar type: Will contain the type of the resource:
     Microsoft.Network/firewallPolicies/intrusionDetectionSignaturesOverrides.
    :vartype type: str
    :ivar properties: Will contain the properties of the resource (the actual signature overrides).
    :vartype properties: ~network_management_client.models.SignaturesOverridesProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SignaturesOverridesProperties'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        id: Optional[str] = None,
        type: Optional[str] = None,
        properties: Optional["SignaturesOverridesProperties"] = None,
        **kwargs
    ):
        """
        :keyword name: Contains the name of the resource (default).
        :paramtype name: str
        :keyword id: Will contain the resource id of the signature override resource.
        :paramtype id: str
        :keyword type: Will contain the type of the resource:
         Microsoft.Network/firewallPolicies/intrusionDetectionSignaturesOverrides.
        :paramtype type: str
        :keyword properties: Will contain the properties of the resource (the actual signature
         overrides).
        :paramtype properties: ~network_management_client.models.SignaturesOverridesProperties
        """
        super(SignaturesOverrides, self).__init__(**kwargs)
        self.name = name
        self.id = id
        self.type = type
        self.properties = properties


class SignaturesOverridesList(msrest.serialization.Model):
    """Describes an object containing an array with a single item.

    :ivar value: Describes a list consisting exactly one item describing the policy's signature
     override status.
    :vartype value: list[~network_management_client.models.SignaturesOverrides]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SignaturesOverrides]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["SignaturesOverrides"]] = None,
        **kwargs
    ):
        """
        :keyword value: Describes a list consisting exactly one item describing the policy's signature
         override status.
        :paramtype value: list[~network_management_client.models.SignaturesOverrides]
        """
        super(SignaturesOverridesList, self).__init__(**kwargs)
        self.value = value


class SignaturesOverridesProperties(msrest.serialization.Model):
    """Will contain the properties of the resource (the actual signature overrides).

    :ivar signatures: Dictionary of :code:`<string>`.
    :vartype signatures: dict[str, str]
    """

    _attribute_map = {
        'signatures': {'key': 'signatures', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        signatures: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword signatures: Dictionary of :code:`<string>`.
        :paramtype signatures: dict[str, str]
        """
        super(SignaturesOverridesProperties, self).__init__(**kwargs)
        self.signatures = signatures


class SingleQueryResult(msrest.serialization.Model):
    """SingleQueryResult.

    :ivar signature_id: The ID of the signature.
    :vartype signature_id: int
    :ivar mode: The current mode enforced, 0 - Disabled, 1 - Alert, 2 -Deny. Possible values
     include: 0, 1, 2.
    :vartype mode: int or ~network_management_client.models.Enum7
    :ivar severity: Describes the severity of signature: 1 - Low, 2 - Medium, 3 - High. Possible
     values include: 1, 2, 3.
    :vartype severity: int or ~network_management_client.models.Enum8
    :ivar direction: Describes in which direction signature is being enforced: 0 - Inbound, 1 -
     OutBound, 2 - Bidirectional. Possible values include: 0, 1, 2.
    :vartype direction: int or ~network_management_client.models.Enum9
    :ivar group: Describes the groups the signature belongs to.
    :vartype group: str
    :ivar description: Describes what is the signature enforces.
    :vartype description: str
    :ivar protocol: Describes the protocol the signatures is being enforced in.
    :vartype protocol: str
    :ivar source_ports: Describes the list of source ports related to this signature.
    :vartype source_ports: list[str]
    :ivar destination_ports: Describes the list of destination ports related to this signature.
    :vartype destination_ports: list[str]
    :ivar last_updated: Describes the last updated time of the signature (provided from 3rd party
     vendor).
    :vartype last_updated: str
    :ivar inherited_from_parent_policy: Describes if this override is inherited from base policy or
     not.
    :vartype inherited_from_parent_policy: bool
    """

    _attribute_map = {
        'signature_id': {'key': 'signatureId', 'type': 'int'},
        'mode': {'key': 'mode', 'type': 'int'},
        'severity': {'key': 'severity', 'type': 'int'},
        'direction': {'key': 'direction', 'type': 'int'},
        'group': {'key': 'group', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_ports': {'key': 'sourcePorts', 'type': '[str]'},
        'destination_ports': {'key': 'destinationPorts', 'type': '[str]'},
        'last_updated': {'key': 'lastUpdated', 'type': 'str'},
        'inherited_from_parent_policy': {'key': 'inheritedFromParentPolicy', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        signature_id: Optional[int] = None,
        mode: Optional[Union[int, "Enum7"]] = None,
        severity: Optional[Union[int, "Enum8"]] = None,
        direction: Optional[Union[int, "Enum9"]] = None,
        group: Optional[str] = None,
        description: Optional[str] = None,
        protocol: Optional[str] = None,
        source_ports: Optional[List[str]] = None,
        destination_ports: Optional[List[str]] = None,
        last_updated: Optional[str] = None,
        inherited_from_parent_policy: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword signature_id: The ID of the signature.
        :paramtype signature_id: int
        :keyword mode: The current mode enforced, 0 - Disabled, 1 - Alert, 2 -Deny. Possible values
         include: 0, 1, 2.
        :paramtype mode: int or ~network_management_client.models.Enum7
        :keyword severity: Describes the severity of signature: 1 - Low, 2 - Medium, 3 - High. Possible
         values include: 1, 2, 3.
        :paramtype severity: int or ~network_management_client.models.Enum8
        :keyword direction: Describes in which direction signature is being enforced: 0 - Inbound, 1 -
         OutBound, 2 - Bidirectional. Possible values include: 0, 1, 2.
        :paramtype direction: int or ~network_management_client.models.Enum9
        :keyword group: Describes the groups the signature belongs to.
        :paramtype group: str
        :keyword description: Describes what is the signature enforces.
        :paramtype description: str
        :keyword protocol: Describes the protocol the signatures is being enforced in.
        :paramtype protocol: str
        :keyword source_ports: Describes the list of source ports related to this signature.
        :paramtype source_ports: list[str]
        :keyword destination_ports: Describes the list of destination ports related to this signature.
        :paramtype destination_ports: list[str]
        :keyword last_updated: Describes the last updated time of the signature (provided from 3rd
         party vendor).
        :paramtype last_updated: str
        :keyword inherited_from_parent_policy: Describes if this override is inherited from base policy
         or not.
        :paramtype inherited_from_parent_policy: bool
        """
        super(SingleQueryResult, self).__init__(**kwargs)
        self.signature_id = signature_id
        self.mode = mode
        self.severity = severity
        self.direction = direction
        self.group = group
        self.description = description
        self.protocol = protocol
        self.source_ports = source_ports
        self.destination_ports = destination_ports
        self.last_updated = last_updated
        self.inherited_from_parent_policy = inherited_from_parent_policy
